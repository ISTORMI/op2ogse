-- -*- mode: lua; coding: windows-1251-dos -*-

class "opt_controls" (CUIWindow)
function opt_controls:__init() super()
end

function opt_controls:InitControls( x, y, xml, handler )
  self:Init( x, y, 738, 416 )
  self:SetAutoDelete( true )

  self.bk = xml:InitFrame( "frame", self )

  xml:InitLabel( "tab_controls:cap_keyboardsetup", self )
  xml:InitLabel( "tab_controls:cap_keyboardsetup", self )
  xml:InitKeyBinding( "tab_controls:key_binding", self )

  local btn = xml:Init3tButton( "tab_controls:btn_default", self )
  handler:Register( btn, "btn_keyb_default" )

  btn = xml:Init3tButton( "tab_controls:btn_advanced", self )
  handler:Register( btn, "btn_advanced_controls" )
end


class "opt_controls_adv" (CUIWindow)
function opt_controls_adv:__init() super()
end

function opt_controls_adv:InitControls( x, y, xml, handler )
  self.handler = handler
  self.xml     = xml

  self:Init( x, y, 738, 416 )
  self:SetAutoDelete( true )

  self.bk = xml:InitFrame( "frame", self )
  self.scroll_v = xml:InitScrollView( "controls_adv:scroll_v", self )

  self:addOpt( "mousesens", function( st )
    xml:InitTrackBar( "controls_adv:track_mousesens", st )
  end )

  self:addOpt( "mouseinvert", function( st )
    xml:InitCheck( "controls_adv:check_mouseinvert", st )
  end, false, true )

  self:addOpt( "mouse_hold_time", function( st )
    xml:InitTrackBar( "controls_adv:track_mouse_hold_time", st )
  end, true )

  self:addOpt( "keyboard_hold_time", function( st )
    xml:InitTrackBar( "controls_adv:track_keyboard_hold_time", st )
  end, true )

  local btn = xml:Init3tButton("controls_adv:btn_to_simply", self )
  handler:Register( btn, "btn_simply_controls" )
end

function opt_controls_adv:addOpt( opt, fn, hint, hide_cap )
  local st = self.xml:InitStatic("controls_adv:templ_item", self.scroll_v )
  if not hide_cap then
    self.xml:InitStatic( "controls_adv:cap_" .. opt, st )
  end
  fn( st )

  local title, content = "", ""
  if hint then
    title   = game.translate_string( "ui_mm_" .. opt .. "_title"   )
    content = game.translate_string( "ui_mm_" .. opt .. "_content" )
  end
  local id = "controls_adv_cap_" .. opt

  local h = self.handler
  h:Register( st, id )
  h:AddCallback( id, ui_events.STATIC_FOCUS_RECEIVED, function()
    h.hint_name:SetText( title )
    h.hint_caption:SetText( content )
  end )
end
