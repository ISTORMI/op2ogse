-- -*- mode: lua; coding: windows-1251-dos -*-
--------------------------------------------------------------------------------
-- Dynamic HUD from ABC Inferno and AMK by Rulix
-- Исправлено и доработано для OGSE by OGSE Team 2009-2013
--------------------------------------------------------------------------------

local enable_visor_refl = {
  [ "hud_sci"    ] = true,
  [ "hud_skat15" ] = true,
}

local hud_cond_names = {
  { "blue",   0.95 },
  { "green",  0.9  },
  { "yellow", 0.8  },
  { "red",    0.6  },
  { "red2",   0.4  },
  { "red3",  -1    },
}


function attach(sm)
  sm:subscribe({ signal = "on_actor_before_hit", fun = this.on_before_hit })
  sm:subscribe(
    {
      signal = "on_actor_weapon_zoom_in",
      fun    = this.on_actor_weapon_zoom_in,
    }
  )
  sm:subscribe(
    {
      signal = "on_actor_weapon_zoom_out",
      fun    = this.on_actor_weapon_zoom_out,
    }
  )
  sm:subscribe({ signal = "on_first_update", fun = this.on_first_update })
  sm:subscribe({ signal = "on_destroy",  fun = this.on_destroy })
  sm:subscribe({ signal = "on_helmet_on_off_done", fun = this.on_helmet_on_off_done })
  sm:subscribe({ signal = "on_key_down", fun = this.chek_keys  })
  sm:subscribe({ signal = "on_mm_return_game", fun = this.on_mm_return_game })
  sm:subscribe({ signal = "on_spawn",    fun = this.on_spawn   })
  sm:subscribe({
    signal = "on_update", fun = this.check_my_suit_hud_update,
    script_name = "ogse_dynamic_hud.check_my_suit_hud_update",
  })
  sm:subscribe({
    signal = "on_actor_update", fun = this.blurs_update,
    script_name = "ogse_dynamic_hud.blurs_update",
  })
end
auto_attach = true


local cam_fov          = get_con_float( "fov" ) or 67.5
local mycurrent_suithud
local sniper_mode_check
local suit_condition
local suithud, suithud_enable = true, false
local wotsuittype      = ""

local sm = ogse_signals.get_mgr()


function on_spawn()
  local have_helmet = ogse.load_var(
    "ogse_dynamic_hud.helmet_on_off.status", true
  )
  if have_helmet then
    suithud, suithud_enable = true,  false
  else
    suithud, suithud_enable = false, false
  end
  rebind_keys()
  sniper_mode_check = check_sniper_class()
end


local dik_helmet
function rebind_keys()
  dik_helmet = {}
  local data = dsh_cfg.get_data()
  if not data.buy_menu then return end
  for _, kn in ipairs( parse_names( data.buy_menu ) ) do
    local dik = keyname_to_dik( kn )
    ASSERT( dik, "keyname to dik not found: %s", kn )
    dik_helmet[ dik ] = true
  end
  cmd2( "unbind", "buy_menu" )
  cmd2( "unbind_sec", "buy_menu" )
end


function on_mm_return_game()
  rebind_keys()
end


function on_destroy()
  switch_shader_effects( "destroy" )
end


function on_first_update()
  local outfit = db.actor:get_current_outfit()
  if outfit then
    preload_dynamic_hud( outfit )
  end
  sm:subscribe({ signal = "on_item_to_slot", fun = this.on_item_to_slot })
  if suithud and not suithud_enable then
    hide_my_suit_hud( false )
  end
end


function on_item_to_slot( obj )
  if obj:is_outfit() then
    preload_dynamic_hud( obj )
    check_my_suit_hud( true )
  end
end


function on_actor_weapon_zoom_in()
  sniper_mode_check:check_sniper()
  sniper_mode_check:update_hud_elements()
end


function on_actor_weapon_zoom_out()
  sniper_mode_check:reset()
  sniper_mode_check:update_hud_elements()
end


class "check_sniper_class"
function check_sniper_class:__init()
  self.hidden         = false
  self.on_sniper_mode = false
  self.zoomed         = false
  self:reset()
end


function check_sniper_class:reset()
  if self.scope_zoom then
    ogse_signals.get_mgr():call( "on_scope_zoom", self.scope_zoom, false )
  end
  bind_stalker.scopeUsed = false
  self.scope_zoom        = false
  self.sniper_mode       = false
  self.zoom_mode         = false
  if self.zooming_t then
    self.zooming_t:stop()
    self.zooming_t = nil
  end
end


-- Убирание худа при использовании оптического прицела или бинокля
function check_sniper_class:check_sniper()
  self:reset()
  local wpn = db.actor:active_item()
  if not ( wpn and wpn:is_weapon() ) then return end
  local scope_sect = ogse_night_vision.get_active_scope_section( wpn ) or false
  if scope_sect and get_bool( scope_sect, "ignore_scope_texture", false ) then
    self.scope_zoom = scope_sect
    self.zoom_mode  = true
    ogse_signals.get_mgr():call( "on_scope_zoom", scope_sect, true )
    self.zooming_t = dsh.wait_condition(
      function()
        local wpn = db.actor:active_item()
        if wpn then
          return not wpn_IsRotatingToZoom( wpn )
        else
          return false
        end
      end,
      function()
        self.zooming_t = nil
        switch_shader_effects( "off" )
      end
    )
  elseif scope_sect then
    local gl_status = 0
    if wpn:is_weapon_gl() then
      gl_status = ogse_wpn_utils.get_grenade_launcher_status( wpn )
    end
    local gl_flag = gl_status == 1
      or (
        gl_status == 2 and ogse_wpn_utils.get_grenade_launcher_flag( wpn )
      )
    if gl_flag and ogse_wpn_utils.get_gl_mode( wpn ) then
      self.zoom_mode = true
    else
      local binder = wpn:binded_object()
      if binder and binder[ "dsh_switch_scope.use_iron_scope" ] then
        self.zoom_mode = true
      else
        bind_stalker.scopeUsed = true
        self.sniper_mode       = true
        self.zooming_t = dsh.wait_condition(
          function()
            local wpn = db.actor:active_item()
            if wpn then
              return not wpn_IsRotatingToZoom( wpn )
            else
              self:reset()
              self:update_hud_elements()
              return false
            end
          end,
          function()
            self.zooming_t = nil
            self:change_on_sniper_mode( true )
          end
        )
      end
    end
  else
    self.zoom_mode = true
  end
end


-- Обновление динамических элементов худа
function check_sniper_class:update_hud_elements()
  self.updating_hud = true
  if self.sniper_mode then
    if suithud_enable then
      hide_my_suit_hud( true )
    end
    self.hidden = true
  elseif self.hidden then
    if suithud and not suithud_enable then
      hide_my_suit_hud( false )
    end
    if self.on_sniper_mode then
      self:change_on_sniper_mode( false )
    end
    self.hidden = false
  elseif self.zoom_mode then
    check_my_suit_hud( true )
    self.zoomed = true
  elseif self.zoomed then
    check_my_suit_hud( true )
    self.zoomed = false
  end
  self.updating_hud = false
end


function check_sniper_class:change_on_sniper_mode( mode )
  ogse_signals.get_mgr():call( "on_sniper_mode", mode )
  self.on_sniper_mode = mode
end


local last_shader_mode = "off"
local rain_drop_t

function switch_shader_effects( mode, hudtype )
  if not ui_mm_opt_video_adv.only_3_and_more_mode() then
    return
  end
  if mode == "destroy" then
    cmd2( "r__flares_control", "off" )
    cmd2( "r2_rain_drops_control", "off" )
    cmd2( "r2_visor_refl_control", "off" )
  elseif mode ~= last_shader_mode then
    cmd2( "r2_rain_drops_control", mode )
    last_shader_mode = mode
    if mode == "on" then
      cmd2( "r2_rain_drops", "on" )
      rain_drop_t = dsh.exec_periodic(
        30000,
        function() calc_rain_drop_speed() end
      )
      switch_flares( hudtype )
      switch_visor_refl( hudtype )
    else
      if rain_drop_t then rain_drop_t:stop() end
      cmd2( "r__flares_control", "off" )
      cmd2( "r2_visor_refl_control", "off" )
    end
  elseif mode == "on" and hudtype then
    if hudtype ~= mycurrent_suithud or sniper_mode_check.updating_hud then
      switch_flares( hudtype )
      switch_visor_refl( hudtype )
    end
  end
end


function switch_visor_refl( hudtype )
  local outfit = db.actor:get_current_outfit()
  if not outfit then return end
  local suithudname = outfit:section()
  local wotsuittype = get_string( suithudname, "dynamic_hud_type" )
  local hud_prefix  = get_string(
    suithudname, "dynamic_hud_prefix", wotsuittype
  )
  if
    hudtype and hud_prefix and enable_visor_refl[ hud_prefix ]
    and not sniper_mode_check.scope_zoom
  then
    cmd2( "r2_visor_refl_control", "on" )
  else
    cmd2( "r2_visor_refl_control", "off" )
  end
end


function switch_flares( hudtype )
  if hudtype and not sniper_mode_check.scope_zoom then
    cmd2( "r__flares_control", "on" )
  else
    cmd2( "r__flares_control", "off" )
  end
end


local last_rain_factor = -1
local rain_speed_min, rain_speed_max = 0.8, 2

function calc_rain_drop_speed()
  local diff = math.abs( last_rain_factor - level.rain_factor() )
  if diff > 0.05 then
    local speed = rain_speed_min
      + ( rain_speed_max - rain_speed_min ) * level.rain_factor()
    cmd2( "r2_rain_drops_speed", speed )
    last_rain_factor = level.rain_factor()
  end
end

-- Проверка нажатия клавиш
local helmet_in_process, helmet_lock = false, false

function chek_keys( key, bind )
  if
    sniper_mode_check.sniper_mode
    or level.main_input_receiver()
    or db.eat
    or ( not db.actor:alive() )
  then
    return
  end
  if
    ( not helmet_lock )
    and (
      dik_helmet[ key ]
      or ( bind == key_bindings.kCAM_ZOOM_OUT and get_current_helmet() )
    )
  then
    if not ( helmet_in_process or dsh_hud_fx.is_active_hud_fx_queue() ) then
      helmet_on_off( true )
      if bind == key_bindings.kCAM_ZOOM_OUT then
        helmet_lock = true
      end
    end
  elseif bind == key_bindings.kCAM_ZOOM_IN then
    helmet_lock = false
  end
end


function check_my_suit_hud_update()
  ogse_signals.get_mgr():reschedule( 1000 )
  check_my_suit_hud()
end


local first_check = true

function check_my_suit_hud( redraw )
  if not suithud_enable then return end
  if db.actor_proxy.online then
    local csuithud = db.actor:get_current_outfit()
    local suithudtype, isitbino, suithudname
    if csuithud then suithudname = csuithud:section() end
    local changed_cond       = false
    local dynamic_hud_enable = false
    if suithudname then
      suit_condition = ""
      for _, v in ipairs( hud_cond_names ) do
        if csuithud:condition() > v[ 2 ] then
          suit_condition = v[ 1 ]
          break
        end
      end
      dynamic_hud_enable = get_bool( suithudname, "dynamic_hud_enable", false )
      if dynamic_hud_enable then
        wotsuittype      = get_string( suithudname, "dynamic_hud_type" )
        local hud_prefix = get_string(
          suithudname, "dynamic_hud_prefix", wotsuittype
        )
        if hud_prefix then
          suithudtype = hud_prefix .. "_" .. suit_condition
          if first_check then
            local cs = get_hud():AddCustomStatic( suithudtype, true )
            cs:wnd():Show( false )
          end
          -- маска может остаться той же самой, но может измениться ее
          -- состояние. В таком случае - это просто перерисовка, а не
          -- смена шлема.
          if mycurrent_suithud and mycurrent_suithud ~= suithudtype then
            for _, v in ipairs( hud_cond_names ) do
              if mycurrent_suithud == ( hud_prefix .. "_" .. v[ 1 ] ) then
                changed_cond = true
                break
              end
            end
          end
        end
      end
    else
      suithudtype = nil
      wotsuittype = nil
    end
    if not db.actor:alive() then suithudtype = nil end
    set_my_suit_hud( dynamic_hud_enable, suithudtype, redraw, changed_cond )
    first_check = false
  end
end


local glass_snd = sound_object( "material\\glass\\glass_fall03hl" )
local suitfirstrun = true
local is_helmet_on = false
local hidden_hud

function set_my_suit_hud( dynamic_hud_enable, hudtype, redraw, changed_cond )
  if not hudtype and not dynamic_hud_enable then
    if is_helmet_on and not sniper_mode_check.sniper_mode then
      sm:call( "on_actor_before_helmet_off" )
    end
    local wchud = get_hud():GetCustomStatic( mycurrent_suithud )
    if wchud and wchud:wnd():IsShown() then
      dsh.HideCustomStatic( mycurrent_suithud )
      sm:call( "on_hud_hide" )
    end
    suitfirstrun = true
    switch_shader_effects( "off" )
    if sniper_mode_check.sniper_mode then
      hidden_hud = mycurrent_suithud
    end
    mycurrent_suithud = nil
    if is_helmet_on and not sniper_mode_check.sniper_mode then
      is_helmet_on = false
      sm:call( "on_actor_helmet_off" )
    end
    return
  end
  local call_helmet = false
  if redraw or hudtype ~= mycurrent_suithud then
    if mycurrent_suithud and hudtype ~= mycurrent_suithud then
      dsh.HideCustomStatic( mycurrent_suithud )
      if not hudtype then
        sm:call( "on_hud_hide" )
      end
    end
    if hudtype then
      sm:call( "on_before_hud_show", ( not mycurrent_suithud ) )
      local cs = dsh.ShowCustomStatic( hudtype )
      if sniper_mode_check.zoom_mode then
        cs:wnd():SetWndRect( -512, -32, 1536, 800 )
      else
        cs:wnd():SetWndRect(    0,   0, 1024, 768 )
      end
      sm:call( "on_hud_show", ( not mycurrent_suithud ), hudtype )
      if string.find( hudtype, wotsuittype ) then
        if ( not ( suitfirstrun or redraw ) ) and suit_condition ~= "blue" then
          glass_snd:play_no_feedback(
            db.actor, sound_object.s2d, 0, vector():set( 0, 0, 0 ), 9.0
          )
        end
        if suitfirstrun then
          suitfirstrun = false
        end
      end
    end
    if ( not ( hidden_hud or redraw ) ) and not changed_cond then
      call_helmet = true
    end
  end
  switch_shader_effects( "on", hudtype )
  mycurrent_suithud = hudtype
  hidden_hud        = nil
  is_helmet_on      = true
  if call_helmet then
    call_helmet = false
    sm:call( "on_actor_helmet_on" )
  end
end


function hide_my_suit_hud( hide, sniper_mode_override )
  if sniper_mode_override ~= nil then
    sniper_mode_check.sniper_mode = sniper_mode_override
  end
  if hide then
    suithud_enable = false
    set_my_suit_hud()
  else
    suithud_enable = true
    check_my_suit_hud()
  end
end


function get_current_helmet()
  if is_helmet_on then
    if sniper_mode_check.sniper_mode then
      return ( hidden_hud        or "" ), wotsuittype
    else
      return ( mycurrent_suithud or "" ), wotsuittype
    end
  end
  return false
end


function blurs_update()
  ogse_signals.get_mgr():reschedule( 40 )
  init_blurs()
end


function init_blurs()
  if
    mycurrent_suithud
    and not string.find( mycurrent_suithud, "_red3", -5, true )
  then
    local zoom = cam_fov / device().fov
    zoom =( zoom - 1 ) * 1.5 + 1
    if zoom < 1.001 then
      zoom = 1.001
    end
    local stretchy = 0.75 / ( math.floor( device().aspect_ratio * 1000 ) / 1000 )
    if stretchy < 1 then stretchy = 1 end
    local rect = {
      x = -768 * zoom + 768,
      y = ( -512 * zoom + 512 ) * stretchy - ( stretchy - 1 ) * 300,
      w = 1024 * zoom,
      h = 768 * zoom * stretchy,
    }
    set_blurs( true, rect )
  else
    set_blurs( false )
  end
end


local blurs
local blurval       = 0 -- уровень запотевания от 0 до 1
local blurlt        = 0 -- время последнего обновления
local blurcyctime   = 0 -- время начала последнего цикла дыхания (выдох)
local blurlastphase = 0

function set_blurs( enabled, rect )
  if ( not blurs ) or ( not get_hud():GetCustomStatic( "hud_blur1" ) ) then
    blurs = {}
    for i = 1, 4 do
      local cs = dsh.ShowCustomStatic( "hud_blur" .. i )
      blurs[ i ] = cs:wnd()
      blurs[ i ]:SetWidth( 0 )
    end
  end
  if not enabled then
    for i = 1, 4 do
      blurs[ i ]:SetWidth( 0 )
    end
    return
  end
  -- Циклы в зависимости от силы дыхания: 0->1->0 0->1->2->4->5->0 0->1->2->3->4->5->0 5->4->3->4->5 4->3->4
  local power  = db.actor.power
  -- текущая частота дыхания от 30 до 120 циклов в минуту
  local period      = 1.0 + power ^ 2
  local expirt      = 0.3
  local breathpower = 3
  -- дельта в секундах
  local delta       = ( time_global() - blurlt      ) / 1000
  -- фаза дыхательного цикла в сек.
  local phase       = ( time_global() - blurcyctime ) / 1000
  blurlt = time_global()
  if phase > period then
    phase = phase % period
    blurcyctime = blurlt - phase * 1000
  end
  if blurlastphase > phase then
    blurlastphase = 0
  end
  local blurdelta = delta * -0.7 -- работа вентиляции
  if blurlastphase < expirt and phase < expirt then
    blurdelta = blurdelta + ( phase - blurlastphase ) * breathpower
  elseif blurlastphase < expirt then
    blurdelta = blurdelta + ( expirt - blurlastphase ) * breathpower
  end
  blurlastphase = phase
  blurval       = blurval + blurdelta
  if blurval > 0.999 then
    blurval = 0.999
  elseif blurval < 0 then
    blurval = 0
  end
  local tm  = math.floor( blurval * 3 )
  local tmn = tm + 1
  local v   = 1 - ( blurval * 3 - math.floor( blurval * 3 ) )
  local v1  = 1 - v
  if tm ~= 0 then
    blurs[ tm  ]:SetColor( GetARGB( v  * 255, 255, 255, 255 ) )
  end
  if tmn ~= 0 then
    blurs[ tmn ]:SetColor( GetARGB( v1 * 255, 255, 255, 255 ) )
  end
  for i = 1, 4 do
    if i == tm or i == tmn then
      blurs[ i ]:SetWndRect( Frect():set( rect.x, rect.y, rect.w, rect.h ) )
    else
      blurs[ i ]:SetWndRect( Frect():set( rect.x, rect.y, 0, 0 ) )
    end
  end
end


function is_sniper_mode()
  return sniper_mode_check.sniper_mode
end


function is_wpn_zoom_mode()
  return sniper_mode_check.zoom_mode
end


local active_pnv, active_torch
function helmet_on_off( by_key )
  local outfit = db.actor:get_current_outfit()
  if
    not (
      outfit
      and get_bool( outfit:section(), "dynamic_hud_enable", false )
    )
  then
    return
  end
  if suithud then
    suithud, suithud_enable = false, false
    ogse.save_var( "ogse_dynamic_hud.helmet_on_off.status", false, "bool" )
  else
    suithud, suithud_enable = true, true
    ogse.save_var( "ogse_dynamic_hud.helmet_on_off.status", true,  "bool" )
    dsh_hud_fx.force_on_helmet()
  end
  active_pnv = ogse_night_vision.get_active_nv_device()
  if active_pnv then
    ogse_night_vision.turn_off_nv_fx()
  end
  local torch = db.actor:item_in_slot( 9 )
  if torch and torch:is_torch() then
    torch = get_torch_obj( torch )
    if torch.on then
      torch:switch( false )
      active_torch = db.actor:item_in_slot( 9 )
    end
  end
  helmet_in_process = true
  db.eat = true
  set_my_suit_hud()
  check_my_suit_hud()
end


function on_helmet_on_off_done( mode )
  if active_torch then
    local torch  = get_torch_obj( active_torch )
    torch:switch( true )
    active_torch = nil
  end
  if active_pnv then
    ogse_night_vision.turn_on_nv_fx(
      get_string( active_pnv:section(), "nightvision_sect" ), active_pnv
    )
    active_pnv = nil
  end
  db.eat = false
  helmet_in_process = false
end


function is_headshot( bone_id )
  -- ключицы и выше
  return ( bone_id and bone_id > 10 and bone_id < 18 )
end


function on_before_hit( hit_data )
  if not ( hit_data.power > 0 and db.actor:alive() ) then return end
  local who    = hit_data.who
  local outfit = db.actor:get_current_outfit()
  if who and who:is_anomaly() and not outfit then
    hit_data.power = hit_data.power * 10
  end
  local bone_index = hit_data.bone_id
  local hit_type   = hit_data.hit_type
  if
    (
      is_headshot( bone_index )
      or hit_type == hit.explosion or hit_type == hit.telepatic
    )
    and outfit
    and get_bool( outfit:section(), "dynamic_hud_enable", false )
    and not is_helmet_on
  then
    hit_data.power = hit_data.power * 10
  end
end


function preload_dynamic_hud( obj )
  local dynamic_hud_enable = get_bool(
    obj:section(), "dynamic_hud_enable", false
  )
  if not dynamic_hud_enable then return end
  local wotsuittype = get_string( obj:section(), "dynamic_hud_type" )
  local hud_prefix  = get_string(
    obj:section(), "dynamic_hud_prefix", wotsuittype
  )
  if not hud_prefix then return end
  local pt = profile_timer()
  pt:start()
  for _, suit_condition in ipairs({ "green", "blue" }) do
    local suithudtype = hud_prefix .. "_" .. suit_condition
    local cs = get_hud():AddCustomStatic( suithudtype, true )
    cs:wnd():Show( false )
  end
  pt:stop()
  log2(
    "[%s]: %s preloaded: %.2fms",
    script_name(), hud_prefix, pt:time() / 1000
  )
end
