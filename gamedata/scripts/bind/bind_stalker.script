-- -*- mode: lua; coding: windows-1251-dos -*-
-- файл из мода "Народной солянки 2009" от 14.06.
-- Адаптирован для Менеджера оружия. Rulix aka Bak от 2.07.09
-- Адатировал: Idler.

function init( obj )
  xr_motivator.AddToMotivator( obj )
end

function actor_init( npc )
  npc:bind_object( actor_binder( npc ) )
end


local sim = alife()


class "actor_binder" ( object_binder )
function actor_binder:__init( obj ) super( obj )
  sim = alife()
  self.bCheckStart = false
  self.weather_manager = level_weathers.WeatherManager()
  self.actor_detector  = xr_detector.actor_detector()
  self.is_saved    = false
  self.am          = ogse_signals.get_mgr()
  self.am:call( "on_load_before_all" )
  self.am:call( "on_init", obj )
end

function actor_binder:__finalize()
  self.am:call( "on_finalize" )
end


local hidden_weapon_lock

function actor_binder:net_spawn( data )
  db.add_actor( self.object )
  self:fix_ui_inventory_info()
  self.am:call( "on_before_spawn" )
  zamok.restore()
  level.show_indicators()
  level.set_snd_volume( 1 )
  self.bCheckStart = true
  if object_binder.net_spawn(self,data) == false then
    return false
  end

  actor_stats.add_to_ranking( self.object:id() )

  death_manager.init_drop_settings()
  amk.on_game_load()
--  xr_gulag.make_restrictors_registry()
  sak.add_tail()
  meceniy_work.main()
  -- kostya_level --
  spawn_teleport.spawn_teleport_exit()
  spawn_teleport.spawn_teleport_hospital()
  netpacket_pda_create.create_pda()
  akill.akill_start_sound()

  -------- пауза при загрузке ---------------
  ui_main_menu.start()
  -------------------------------------------

  if
    db.actor:dont_has_info( "acv_giv" )
    or db.actor:dont_has_info( "acv_stay2" )
  then
    self.am:subscribe({
      signal = "on_sleep_finished", fun = self.check_acv_giv, self = self,
      script_name = "bind_stalker.check_acv_giv",
    })
  end

  local hide_weapon_on_load = ogse.load_var_safe( "bind_stalker.weapon_hide" )
  if hide_weapon_on_load then
    hidden_weapon_lock = hide_weapon_on_load
    dsh.exec_on_update( this.hide_weapon, hide_weapon_on_load )
  end

  self.am:call( "on_spawn", data )
  return true
end


function actor_binder:net_destroy()
  amk.on_game_save()

  actor_stats.remove_from_ranking( self.object:id() )
  db.del_actor( self.object )

  self.object:set_callback( callback.inventory_info, nil )
  self.object:set_callback( callback.article_info, nil )
  self.object:set_callback( callback.on_item_take, nil )
  self.object:set_callback( callback.on_item_drop, nil )
  self.object:set_callback( callback.trade_sell_buy_item, nil )
  -- self.object:set_callback( callback.actor_sleep, nil )
  self.object:set_callback( callback.task_state, nil )
  -- self.object:set_callback( callback.map_location_added, nil )
  self.object:set_callback( callback.level_border_enter, nil )
  self.object:set_callback( callback.level_border_exit, nil )
  self.object:set_callback( callback.take_item_from_box, nil )
  self.object:set_callback( callback.use_object, nil )
  self.object:set_callback( callback.on_key_press, nil )
  self.object:set_callback( callback.on_key_release, nil )
  self.object:set_callback( callback.on_key_hold, nil )
  self.object:set_callback( callback.on_mouse_wheel, nil )
  self.object:set_callback( callback.on_mouse_move, nil )
  self.object:set_callback( callback.on_belt, nil )
  self.object:set_callback( callback.on_ruck, nil )
  self.object:set_callback( callback.on_slot, nil )
  self.object:set_callback( callback.on_cell_item_select, nil )
  self.object:set_callback( callback.hit, nil )
  self.object:set_callback( callback.on_goodwill_change, nil )
  self.object:set_callback( callback.death, nil )
  self.object:set_callback( callback.entity_alive_before_hit, nil )
  self.object:set_callback( callback.on_before_use_item, nil )
  self.object:set_callback( callback.on_actor_weapon_zoom_in,  nil )
  self.object:set_callback( callback.on_actor_weapon_zoom_out, nil )
  self.object:set_callback( callback.on_throw_grenade, nil )
  self.object:set_callback( callback.on_actor_weapon_reload, nil )
  self.object:set_callback( callback.on_actor_weapon_fire, nil )
  self.object:set_callback( callback.on_actor_weapon_start_firing, nil )
  self.object:set_callback( callback.place_item_to_box, nil )
  self.object:set_callback( callback.on_actor_weapon_switch_gl, nil )
  self.object:set_callback( callback.update_artefacts_on_belt, nil )
  self.object:set_callback( callback.level_changer_action, nil )
  self.object:set_callback( callback.on_cell_item_focus, nil )
  self.object:set_callback( callback.on_cell_item_focus_lost, nil )
  self.object:set_callback( callback.on_cell_item_mouse, nil )
  self.object:set_callback( callback.trade_perform_operation, nil )

  if sr_psy_antenna.psy_antenna then
    sr_psy_antenna.psy_antenna:destroy()
    sr_psy_antenna.psy_antenna = false
  end

  xr_sound.stop_all_sound_object()

  self.am:call( "on_destroy" )

  object_binder.net_destroy( self )
end


function actor_binder:reinit()
  object_binder.reinit( self )
  
  local npc_id = self.object:id()
  db.storage[ npc_id ] = {}
  self.st = db.storage[npc_id]
  self.st.pstor = nil

  self.object:set_callback( callback.inventory_info, self.info_callback, self )
  self.object:set_callback( callback.article_info, self.article_callback, self )
  self.object:set_callback( callback.on_item_take, self.on_item_take, self )
  self.object:set_callback( callback.on_item_drop, self.on_item_drop, self )
  self.object:set_callback( callback.trade_sell_buy_item, self.on_trade, self )
  -- self.object:set_callback( callback.actor_sleep, self.sleep_callback, self )
  self.object:set_callback( callback.task_state, self.task_callback, self )
  -- self.object:set_callback( callback.map_location_added, self.map_location_added_callback, self )
  self.object:set_callback( callback.level_border_enter, self.level_border_enter, self )
  self.object:set_callback( callback.level_border_exit, self.level_border_exit, self )
  self.object:set_callback( callback.take_item_from_box, self.take_item_from_box, self )
  self.object:set_callback( callback.use_object, self.on_use_object, self )
  self.object:set_callback( callback.hit, self.hit_callback, self )
  self.object:set_callback( callback.death, self.death_callback, self )

  -- нажатие клавиши
  self.object:set_callback( callback.on_key_press, self.on_key, self )
  -- отпускание клавиши
  self.object:set_callback( callback.on_key_release, self.on_key_free, self )
  -- удержание клавиши
  self.object:set_callback( callback.on_key_hold, self.on_key_hold, self )
  -- вращение колесика мыши
  self.object:set_callback( callback.on_mouse_wheel, self.on_wheel_rotation, self )
  -- движение мыши
  self.object:set_callback( callback.on_mouse_move, self.on_mouse_move, self )
  -- перемещение предмета на пояс
  self.object:set_callback( callback.on_belt, self.item_to_belt, self )
  -- перемещение предмета в рюкзак
  self.object:set_callback( callback.on_ruck, self.item_to_backpack, self )
  -- перемещение предмета в слот
  self.object:set_callback( callback.on_slot, self.item_to_slot, self )
  self.object:set_callback( callback.on_cell_item_select, self.on_select_item, self )
  -- изменение отношений
  self.object:set_callback( callback.on_goodwill_change, self.on_goodwill_change, self )
  self.object:set_callback( callback.entity_alive_before_hit, self.before_hit_callback, self )
  self.object:set_callback( callback.on_before_use_item, self.before_use, self )
  self.object:set_callback(
    callback.on_actor_weapon_zoom_in,  self.on_actor_weapon_zoom_in, self
  )
  self.object:set_callback(
    callback.on_actor_weapon_zoom_out, self.on_actor_weapon_zoom_out, self
  )
  self.object:set_callback(
    callback.on_throw_grenade, self.on_throw_grenade, self
  )
  self.object:set_callback(
    callback.on_actor_weapon_reload, self.on_actor_weapon_reload, self
  )
  self.object:set_callback(
    callback.on_actor_weapon_fire, self.on_actor_weapon_fire, self
  )
  self.object:set_callback(
    callback.on_actor_weapon_start_firing, self.on_actor_weapon_start_firing,
    self
  )
  self.object:set_callback(
    callback.place_item_to_box, self.on_inv_box_put_item, self
  )
  self.object:set_callback(
    callback.on_actor_weapon_switch_gl, self.on_actor_weapon_switch_gl,
    self
  )
  self.object:set_callback(
    callback.update_artefacts_on_belt, self.update_artefacts_on_belt, self
  )
  self.object:set_callback(
    callback.level_changer_action, self.level_changer_action, self
  )
  self.object:set_callback(
    callback.on_cell_item_focus, self.on_cell_item_focus, self
  )
  self.object:set_callback(
    callback.on_cell_item_focus_lost, self.on_cell_item_focus_lost, self
  )
  self.object:set_callback(
    callback.on_cell_item_mouse, self.on_cell_item_mouse, self
  )
  self.object:set_callback(
    callback.trade_perform_operation, self.trade_perform_operation, self
  )

  self.am:call( "on_reinit" )
end


function actor_binder:on_goodwill_change( from, to )
  self.am:call( "on_goodwill_change", from, to )
end


function actor_binder:death_callback( obj, who )
  archievements.on_actor_death( who )
  level.set_snd_volume( 1 )
  self.am:call( "on_death", obj, who )
end


function actor_binder:take_item_from_box( box, item )
  -- подъем рюкзаков
  if box:is_inv_box_empty() then
    if transparent_treasure.IsTaken( box:section(), box:name() ) then 
      level.start_stop_menu( level.main_input_receiver(), true )
      -- здесь можно прописывать калбеки взятия на проверку по секции тайника,
      -- чтобы не придумывать уникальные предметы
      archievements.check_treasure( box )
      alife():create(
        "treasure_item",
        box:position(),
        db.actor:level_vertex_id(), db.actor:game_vertex_id(), 0
      )
      alife():release( alife():object( box:id() ) )
    end
  end

  self.am:call( "on_take_from_box", box, item, sim:object( item:id() ) )

  amk.on_item_take_from_box( box, item )
end


function actor_binder:level_border_enter( npc, info_id )
  self.am:call( "on_level_border_enter", npc, info_id )
end


function actor_binder:level_border_exit( npc, info_id )
  self.am:call( "on_level_border_exit", npc, info_id )
end


local info2call = {
  ui_car_body              = "on_body_open",
  ui_car_body_hide         = "on_body_hide",
  ui_inventory             = "on_inventory_open",
  ui_inventory_hide        = "on_inventory_hide",
  ui_pda                   = "on_pda_open",
  ui_pda_actor_info        = "on_pda_actor_info",
  ui_pda_contacts          = "on_pda_contacts_open",
  ui_pda_contacts_hide     = "on_pda_contacts_hide",
  ui_pda_diary             = "on_pda_diary_open",
  ui_pda_diary_hide        = "on_pda_diary_hide",
  ui_pda_encyclopedia      = "on_pda_encyclopedia_open",
  ui_pda_encyclopedia_hide = "on_pda_encyclopedia_hide",
  ui_pda_events            = "on_pda_events",
  ui_pda_hide              = "on_pda_hide",
  ui_pda_jobs              = "on_pda_jobs_open",
  ui_pda_jobs_accomplished = "on_pda_jobs_accomplished",
  ui_pda_jobs_current      = "on_pda_jobs_current",
  ui_pda_jobs_failed       = "on_pda_jobs_failed",
  ui_pda_jobs_hide         = "on_pda_jobs_hide",
  ui_pda_map_global        = "on_pda_map_global",
  ui_pda_map_local         = "on_pda_map_local",
  ui_pda_news              = "on_pda_news_open",
  ui_pda_news_hide         = "on_pda_news_hide",
  ui_pda_ranking           = "on_pda_ranking",
  ui_talk                  = "on_talk_open",
  ui_talk_hide             = "on_talk_hide",
  ui_trade                 = "on_trade_open",
  ui_trade_hide            = "on_trade_hide",
}

function actor_binder:info_callback( npc, info_id )
  -- Отметки на карте
  archievements.on_info( info_id )

  if npc:id() == db.actor:id() then
    meceniy_spawn.respawn( info_id )
  end

  self.am:call( "on_info", npc, info_id )
  local sc = info2call[ info_id ]
  if sc then
    self.am:call( sc, npc )
  end
end


local is_on_trade = false

function actor_binder:on_trade( item, sell_bye, money )
  if sell_bye == true then
    game_stats.money_trade_update( money )
  else       
    if isMagazinedWeapon( item ) then
      item:unload_magazine()
    end
    game_stats.money_trade_update( -money )
  end

  self.am:call( "on_trade", item, sell_bye, money )
  is_on_trade = true
end


function actor_binder:article_callback( npc, group, name, article_type )
  if device().precache_frame >1 then return end
  
  if group == "Diary" then
    news_manager.send_encyclopedy( "diary", group )
  else
    news_manager.send_encyclopedy( "encyclopedy", group )
  end
  
  self.am:call( "on_article", npc, group, name, article_type )
end


function actor_binder:on_item_take( obj )
  sak.check_used_item( obj )

  if device().precache_frame < 1 then
    local s = get_string( obj:section(), "bind_stalker.on_take_call" )
    if s then
      local f, err = loadstring( "return " .. s .. "( ... )" )
      ASSERT( f, err )
      f( obj )
    end
    amk.on_item_take( obj )
    braad_test.checking_use_item( obj )
    babah.on_item_take( obj )
    if
      obj:is_weapon_magazined() and self.object:is_talking()
      and not protected_items.not_unloaded_weapon( obj:section() )
    then
      obj:unload_magazine()
    end
  end

  local sobj = alife():object( obj:id() )
  if sobj then -- такое бывает, если до этого объект был удалён в on_ruck
    self.am:call( "on_take", obj, sobj )
  end
end


function actor_binder:on_item_drop( obj )
  --AMK UTILS--
  amk_utils.actor_item_drop( obj )
  --AMK UTILS--
  sak.check_droped_item( obj )
  braad_test.drop_actor( obj )
  braad_test.drop_lim( obj )

  self.am:call( "on_drop_before_all", obj )
  local sobj = sim:object( obj:id() )
  if sobj then
    self.am:call( "on_drop", obj, sobj )
  end
end


function actor_binder:before_use( item )
  self.am:call( "on_actor_before_use", item, sim:object( item:id() ) )
end


function actor_binder:before_hit_callback( hit_data )
  if not self.last_hit_data then
    self.last_hit_data = {}
  end
  dsh.copy_hit_data( hit_data, self.last_hit_data )
  local obj = level.object_by_id( hit_data.who_id )
  if obj then                   -- если есть виновник хита
    -- проверяем условия игнорирования урона от дружественного огня
    if
      obj:id() ~= self.object:id() and obj:is_stalker()
      and xr_motivator.is_friendly_fire( self.object, obj )
    then
      -- подстрелил друг, игнорируем
      hit_data.ignore_hit = true
      log2( "[%s]: ignore ff from %s", script_name(), obj:name() )
    end
  end
  if not hit_data.ignore_hit then
    self.am:call( "on_actor_before_hit", hit_data )
  end
end


function actor_binder:task_callback( _task, _objective, _state )
  task_manager.task_callback( _task:get_id(), _objective:get_idx(), _state )
  self.am:call( "on_task", _task, _objective, _state )
end


function actor_binder:map_location_added_callback( spot_type_str, object_id )
  if ( false == app_ready() ) or device().precache_frame > 1 then return end
  self.am:call( "on_add_map_location", spot_type_str, object_id )
end


local update_was_never_called = true
scopeUsed = false

function actor_binder:update( delta )
  if update_was_never_called then
    self.am:call( "on_before_first_update" )
  end
  self.am:call( "on_before_update", delta )

  local time       = time_global()
  amk.oau_reason   = "actor_binder:update"
  amk.oau_watchdog = 2001
  object_binder.update( self, delta )

  amk.oau_watchdog = 188
  if self.bCheckStart then
    db.money = self.object:money()

    if
      ( not has_alife_info( "storyline_actor_start" ) )
      and level.name() == "l01_escape"
    then
      self.am:call( "on_storyline_start" )
      self.object:give_info_portion( "storyline_actor_start" )
      _G.g_start_avi = true
    end

    if
      ( not has_alife_info( "encyclopedy" ) )
      and has_alife_info( "arhara_shaxter_start" )
    then
      self.object:give_info_portion( "encyclopedy" )
    end

    if not has_alife_info( "global_dialogs" ) then
      self.object:give_info_portion( "global_dialogs" )
    end

    if not has_alife_info( "level_changer_icons" ) then
      self.object:give_info_portion( "level_changer_icons" )
    end

    archievements.acv_death()

    if
      has_alife_info( "sar_monolith_destroy" )
      and not has_alife_info( "sar2_monolith_miracle" )
    then
      db.actor:give_info_portion( "sar2_monolith_miracle" )
    end

    if not has_alife_info( "acv_giv" ) then
      local tf = get_float( "alife", "time_factor" )
      dsh.timeout(
        math.floor( ( 9 * 3600 * 1000 ) / tf ),
        function()
          db.actor:give_info_portion( "acv_giv" )
        end
      )
    end

    self.bCheckStart = nil
  end

  amk.oau_watchdog = 0
  amk.oau_reason   = ""

  if update_was_never_called then
    self.am:call( "on_first_update" )
    update_was_never_called = false
    self.am:delay_time_limit( 10000 )
  end
  self.am:call( "on_actor_update", delta )
end


function actor_binder:show_hud_save_warning( crit, timeout, low, argb )
  if self.hud_save_warning_t then
    if low then
      return
    else
      self.hud_save_warning_t:stop()
    end
  end
  if not argb then
    argb = { 255, 155, 0, 0 }
  end
  self.hud_save_warning_t = dsh.exec_on_update( function()
    if not get_hud():GetCustomStatic( "hud_save_warning" ) then
      get_hud():AddCustomStatic( "hud_save_warning" )
    end
    local wnd = get_hud():GetCustomStatic( "hud_save_warning" ):wnd()
    wnd:SetTextColor( unpack( argb ) )
    if crit == 1 then
      wnd:SetTextST( game.translate_string( "amk_warn_trans" ) )
    elseif crit == 2 then
      wnd:SetTextST( game.translate_string( "amk_warn_trans_critical" ) )
    else
      -- wnd:SetTextST( game.translate_string( "amk_warn_attention" ) )
      wnd:SetTextST( game.translate_string( crit ) )
    end
    self.hud_save_warning_t = dsh.timeout( timeout, function()
      if get_hud():GetCustomStatic( "hud_save_warning" ) then
        get_hud():RemoveCustomStatic( "hud_save_warning" )
      end
      self.hud_save_warning_t = nil
    end )
  end )
end


function actor_binder:check_acv_giv()
  if not has_alife_info("acv_stay1") and amk.game_days() > 182 then
    db.actor:give_info_portion( "acv_stay1" )
  elseif not has_alife_info( "acv_stay2" ) and amk.game_days() > 365 then
    db.actor:give_info_portion("acv_stay2")
  end
end


local keyboard_events = {
  [ "on_key_down" ] = "on_key_down",
  [ "on_key_hold" ] = "on_key_hold",
  [ "on_key_up"   ] = "on_key_up",
}

function actor_binder:on_key( key )
  self.am:call( keyboard_events.on_key_down, key, dik_to_bind( key ) )
end

function actor_binder:on_key_free( key )
  self.am:call( keyboard_events.on_key_up, key, dik_to_bind( key ) )
end

function actor_binder:on_key_hold( key )
  self.am:call( keyboard_events.on_key_hold, key, dik_to_bind( key ) )
end


function actor_binder:on_wheel_rotation( vol )
  self.am:call( "on_wheel", vol )
end


function actor_binder:on_mouse_move( velx, vely )
  self.am:call( "on_mouse_move", velx, vely )
end


function actor_binder:item_to_belt( obj )
  local sobj = sim:object( obj:id() )
  if sobj then
    self.am:call( "on_item_to_belt", obj, sobj )
  end
end


function actor_binder:item_to_backpack( obj )
  amk_utils.actor_item_take( obj )
  local sobj = sim:object( obj:id() )
  if sobj then
  -- такое бывает, когда спавним в инвентарь предмет, а потом его тут же
  -- удаляем ещё выхода в онлайн
    self.am:call( "on_item_to_ruck", obj, sobj )
  end
end


function actor_binder:item_to_slot( obj )
  local sobj = sim:object( obj:id() )
  if sobj then
    self.am:call( "on_item_to_slot", obj, sobj )
  end
end


function actor_binder:on_select_item( obj )
  local sobj = sim:object( obj:id() )
  if sobj then
    self.am:call( "on_select_item", obj, sobj )
  end
end


function actor_binder:hit_callback( obj, amount, local_direction, who, bone_index )
  self.am:call( "on_hit", obj, amount, local_direction, who, bone_index )
end


function actor_binder:save( packet )
  if ogse_st_mgr.timer_exists( "amk.no_save" ) and not db.debug then
    abort( "Сохранение сделано слишком быстро после загрузки. Из-за этого очень вероятно, что созданное сохранение, а также текущее игровое состояние будет повреждено. Поэтому немедленно удалите только что созданное сохранение, затем полностью перезапустите игру." )
    dsh.timeout( 3000, kostya_dialog.zonedocs_gg_kill )
  end

  -- удаление запущенных варок перед сейвом
  amk.remove_timer( "af_transform_universal" )

  if not has_alife_info("teleport_started") and utils.level_changing() then
    archievements.acv_count_event( "acv_skit", 300, game.translate_string( "acv_skit" ) )
  end

  self:save_old( packet )
  ASSERT(
    packet:w_tell() <= 7500,
    "actor packet size is critical: %s", packet:w_tell()
  )
  log2( "~~Actor netpacket size %s", packet:w_tell() )

  self.am:call( "on_save", packet )
  self.am:call( "on_save_after_all" )
  self.is_saved = true
end


function actor_binder:save_old( packet )
  local save_treasure_manager = true
  object_binder.save( self, packet )

  --' Сохраняем уровень сложности
  if save_treasure_manager == true then
    packet:w_u8( level.get_game_difficulty() + 128 )
  else
    packet:w_u8( level.get_game_difficulty() )
  end

  --' Сохраняем данные об отключенном вводе
  packet:w_bool( false )

  xr_logic.pstor_save_all( self.object, packet )
  self.weather_manager:save( packet )
  sr_psy_antenna.save( packet )
  self.actor_detector:save( packet )
end


function actor_binder:load( reader )
  object_binder.load( self, reader )

  --' Загружаем уровень сложности
  local game_difficulty = reader:r_u8()
  local load_treasure_manager = false
  if game_difficulty >= 128 then
    game_difficulty = game_difficulty - 128
    load_treasure_manager = true
  end

  if reader:r_eof() then
    abort( "Это сохранение необратимо повреждено - удалите его, и переиграйте с более раннего сохранения. Продолжать игру на этом сохранении категорически запрещено!" )
    string.format( "%s" )
  end

  local stored_input_time = reader:r_u8()
  -- оставлено для совместимости
  if stored_input_time == true then
    utils.r_CTime( reader )
  end

  xr_logic.pstor_load_all( self.object, reader )
  self.weather_manager:load( reader )
  sr_psy_antenna.load( reader )
  if load_treasure_manager == true then
    treasure_manager.load( reader )
  end
  task_manager.load( reader )
  self.actor_detector:load( reader )

  self.am:call( "on_load", reader )

  if xr_logic.pstor_retrieve( self.object, "emerg", false ) then
    -- нельзя использовать amk.load_varible(), так как db.actor ещё не
    -- определён
    self:show_hud_save_warning( 2, 60000 )
  end
end


function actor_binder:on_use_object( obj )
  archievements.on_use_item( obj )
  buusty_dialog.use_money( obj )
  local s = get_string( obj:section(), "bind_stalker.on_use_call" )
  if s then
    local f, err = loadstring( "return " .. s .. "( ... )" )
    ASSERT( f, err )
    f( obj )
  end
  if obj then
    local sobj = sim:object( obj:id() )
    if sobj then
      self.am:call( "on_use", obj, sobj )
    end
  end
end


function actor_binder:on_actor_weapon_zoom_in( obj )
  self.am:call( "on_actor_weapon_zoom_in", obj  )
end

function actor_binder:on_actor_weapon_zoom_out( obj )
  self.am:call( "on_actor_weapon_zoom_out", obj )
end


function actor_binder:on_throw_grenade( obj )
  self.am:call( "on_throw_grenade", obj )
end


function actor_binder:on_actor_weapon_reload( obj )
  self.am:call( "on_actor_weapon_reload", obj )
end


function actor_binder:on_actor_weapon_fire( obj )
  self.am:call( "on_actor_weapon_fire", obj )
end


function actor_binder:on_actor_weapon_start_firing( obj )
  self.am:call( "on_actor_weapon_start_firing", obj )
end


function actor_binder:on_inv_box_put_item( box, item )
  self.am:call(
    "on_inv_box_put_item", box, item, alife():object( item:id() )
  )
end


function actor_binder:on_actor_weapon_switch_gl( obj )
  local gl_mode = ogse_wpn_utils.get_gl_mode( obj )
  self.am:call( "on_actor_weapon_switch_gl", obj, gl_mode )
end


function actor_binder:update_artefacts_on_belt( dt )
  self.am:call( "update_artefacts_on_belt", dt )
end


function actor_binder:level_changer_action( obj, wnd )
  local sobj = obj:get_alife_object()
  local lc   = sobj:get_level_changer()
  local dest_vertex = lc.dest_game_vertex_id
  local dest_lname  = alife():level_name(
    game_graph():vertex( dest_vertex ):level_id()
  )
  local msg_text_wnd = wnd:FindChild( "message_box_change_level:message_text" )
  msg_text_wnd:GetCUIStatic():SetText(
    game.translate_string( dest_lname ) .. ": "
    .. game.translate_string( "level_changer_invitation" )
  )
  self.am:call( "level_changer_action", obj, wnd )
end


function actor_binder:on_cell_item_focus( obj )
  self.am:call( "on_cell_item_focus", obj )
end


function actor_binder:on_cell_item_focus_lost( obj )
  self.am:call( "on_cell_item_focus_lost", obj )
end


function actor_binder:on_cell_item_mouse( obj, x, y, action )
  self.am:call( "on_cell_item_mouse", obj, x, y, action )
end


function actor_binder:fix_ui_inventory_info()
  for info, _ in pairs( info2call ) do
    if self.object:has_info( info ) then
      log2( "[%s]: disable %s", script_name(), info )
      self.object:disable_info_portion( info )
    end
  end
end


function actor_binder:trade_perform_operation( trader, money_out, money_in )
  self.am:call( "on_trade_money", trader, money_out, money_in )
end


-- Weapon functions
local restore_wpn_t, weapon_hide
local restore_wpn_ext = { true }

function hide_weapon( freq, lock )
  weapon_hide = true
  if lock and not hidden_weapon_lock then
    hidden_weapon_lock = freq
    ogse.save_var( "bind_stalker.weapon_hide", freq, "u16" )
  end
  if restore_wpn_t then return end
  db.actor:hide_weapon()
  if not freq then freq = 200 end
  local sm  = ogse_signals.get_mgr()
  restore_wpn_t = dsh.rt_wait_condition(
    function()
      restore_wpn_ext[ 1 ] = true
      sm:call( "can_restore_weapon", restore_wpn_ext )
      if not restore_wpn_ext[ 1 ] then return false end
      local outfit = db.actor:get_current_outfit()
      return not (
        weapon_hide
        or db.eat
        or ( outfit and outfit:section() == "meceniy_outfit_new" )
      )
    end,
    function()
      db.actor:restore_weapon()
      weapon_hide   = false
      restore_wpn_t = nil
    end,
    function( timer )
      timer:reschedule( freq )
    end
  )
  restore_wpn_t:set_script_name( "bind_stalker.hide_weapon" )
end

function restore_weapon( unlock )
   if hidden_weapon_lock then
     if unlock then
       hidden_weapon_lock = nil
       ogse.delete_var( "bind_stalker.weapon_hide" )
     else
       return
     end
   end
   weapon_hide = false
end


function has_traded()
  if is_on_trade then
    if db.actor:is_talking() then
      db.actor:stop_talk()
    end
    is_on_trade = false
  end
end


function redirect_keys_to( script )
  for k, v in pairs( keyboard_events ) do
    if script then
      keyboard_events[ k ] = script .. "." .. k
    else
      keyboard_events[ k ] = k
    end
  end
end
