-- -*- mode: lua; coding: windows-1251-dos -*-

--\\*"НаноЭкзоСкелет "Скат-15М""..С Системой Жизненной Поддержки (СЖП)
--и С возможностью апгрейда..Меченый(Стрелок)..

local lim_health     = 0.7
local lim_psy_health = 0.3
local lim_bleed      = 0.7
local lim_power      = 0.3
local lim_radiation  = 0.4


function attach( sm )
  sm:subscribe({ signal = "on_drop",         fun = this.remove_outfit   })
  sm:subscribe({ signal = "on_item_to_ruck", fun = this.remove_outfit   })
  sm:subscribe({ signal = "on_item_to_slot", fun = this.use_outfit      })
  sm:subscribe({ signal = "on_spawn",        fun = this.on_spawn        })
  sm:subscribe({ signal = "on_use",          fun = this.on_item_use     })
end


function use_outfit( obj )
  if string.find( obj:section(), "exo_mil_exoskeleton_add", 1, true ) then
    subscribe()
  end
end


function remove_outfit( obj )
  if string.find( obj:section(), "exo_mil_exoskeleton_add", 1, true ) then
    local outfit = db.actor:get_current_outfit()
    if
      outfit
      and string.find( outfit:section(), "exo_mil_exoskeleton_add", 1, true )
    then
      return
    end
    unsubscribe()
  end
end


local signals
function subscribe()
  if not signals then
    signals = {
      signal = "on_update", fun = this.on_actor_update,
      script_name = script_name(),
    }
    ogse_signals.get_mgr():subscribe( signals )
  end
end

function unsubscribe()
  if signals then
    ogse_signals.get_mgr():unsubscribe( signals )
    signals = nil
  end
end


cfg = {}
function on_spawn()
  load_cfg()
end


function load_cfg()
  cfg.enabled   = ogse.load_var( "meceniy_outfit.enabled",   true )
  cfg.health    = ogse.load_var( "meceniy_outfit.health",    true )
  cfg.power     = ogse.load_var( "meceniy_outfit.power",     true )
  cfg.radiation = ogse.load_var( "meceniy_outfit.radiation", true )
end


function save_cfg()
  for k, v in pairs( cfg ) do
    ogse.save_var( "meceniy_outfit." .. k, v, "bool" )
  end
end


local con_skat_1 = 1
local con_skat_2 = 1
local con_skat_3 = 1

local flag_skat_1 = false
local flag_skat_2 = false
local flag_skat_3 = false


function on_actor_update()
  ogse_signals.get_mgr():reschedule( 1000 )
  local outfit = db.actor:get_current_outfit()

  if
    ( not outfit )
    or (
      not string.find( outfit:section(), "exo_mil_exoskeleton_add", 1, true )
    )
    or ( not db.actor:alive() )
  then
    return
  end

  if flag_skat_1 then
    local e_up1 = db.actor:object( "exo_mil_exoskeleton_add" )
    if e_up1 then
      e_up1:set_condition( con_skat_1 )
    end
    flag_skat_1 = false
  elseif flag_skat_2 then
    local e_up2 = db.actor:object( "exo_mil_exoskeleton_addr" )
    if e_up2 then
      e_up2:set_condition( con_skat_2 )
    end
    flag_skat_2 = false
  elseif flag_skat_3 then
    local e_up3 = db.actor:object( "exo_mil_exoskeleton_addrs" )
    if e_up3 then
      e_up3:set_condition( con_skat_3 )
    end
    flag_skat_3 = false
  end
  if cfg.enabled and dsh_weight_control.get_power_mode() then
    if system_outfit() then return end
    if     outfit:section() == "exo_mil_exoskeleton_addr"  then
      new_system_rad()
    elseif outfit:section() == "exo_mil_exoskeleton_addrs" then
      new_system_rad()
      new_system_power()
      new_anti_dot()
    end
  end
end


function on_sub_actor_update()
  update_spawn()
end


function update_spawn()
  alife():create(
    "doc_1", vector():set( -198.597, 4.488, 168.971 ), 25633, 1363
  )
  alife():create(
    "art_acumm", vector():set( -33.133, 3.548, -64.111 ), 198, 1960
  )
  alife():create(
    "doc_8", vector():set( -33.133, 3.548, -64.111 ), 198, 1960
  )
  alife():create(
    "doc_10", vector():set( -89.387, -2.457, -25.271 ), 19105, 2875
  )
  alife():create(
    "art_acumm", vector():set( -89.387, -2.457, -25.271 ), 19105, 2875
  )
  spawner()
end


function on_item_use( obj )
  if     obj:section() == "doc_1"  then
    doc_use()
  elseif obj:section() == "doc_8"  then
    doc_use_2()
  elseif obj:section() == "doc_10" then
    doc_use_3()
  end
end


function doc_use()
  local e1 = db.actor:object( "exo_mil_exoskeleton" )
  if e1 then
    con_skat_1 = e1:condition()
    alife():release( alife():object( e1:id() ) )
    amk.spawn_item_in_inv( "exo_mil_exoskeleton_add" )
    flag_skat_1 = true
    news_manager.send_tip( db.actor, "doc_use_0", nil, "nano", 5000 )
    alife():create(
      "art_acumm", vector():set( -89.387, -2.457, -25.271 ), 19105, 2875
    )
    update_spawn_2()
  else
    amk.spawn_item_in_inv( "doc_1" )
  end
end


function update_spawn_2()
  alife():create(
    "art_acumm", vector():set( -89.387, -2.457, -25.271 ), 19105, 2875
  )
end


function doc_use_2()
  local e2 = db.actor:object( "exo_mil_exoskeleton_add" )
  if e2 then
    con_skat_2 = e2:condition()
    alife():release( alife():object( e2:id() ) )
    amk.spawn_item_in_inv( "exo_mil_exoskeleton_addr" )
    flag_skat_2 = true
    news_manager.send_tip( db.actor, "doc_use_2_0", nil, "nano", 5000 )
  else
    amk.spawn_item_in_inv( "doc_8" )
  end
end


function doc_use_3()
  local e3 = db.actor:object( "exo_mil_exoskeleton_addr" )
  if e3 then
    con_skat_3 = e3:condition()
    alife():release( alife():object( e3:id() ) )
    amk.spawn_item_in_inv( "exo_mil_exoskeleton_addrs" )
    flag_skat_3 = true
    news_manager.send_tip( db.actor, "doc_use_3_0", nil, "nano", 5000 )
  else
    amk.spawn_item_in_inv( "doc_10" )
  end
end


function spawner()
  alife():create(
    "art_acumm", vector():set( -89.387, -2.457, -25.271 ), 19105, 2875
  )
end


function system_outfit()
  if not cfg.health then return false end
  if
    db.actor.health < lim_health
    and not (
      dsh_medkit.restoring( "health_restore_speed" )
      or get_actor_obj():is_actor_sprinting()
    )
  then
    local medkits
    if
      db.actor.radiation > lim_radiation
      and not dsh_medkit.restoring( "radiation_restore_speed" )
    then
      medkits = { "medkit_scientic", "medkit", "medkit_army" }
    else
      medkits = { "medkit", "medkit_army", "medkit_scientic" }
    end
    local best_item
    for _, sect in ipairs( medkits ) do
      local obj = find_item( sect )
      if obj then
        best_item = obj
        if db.actor.health + get_float( sect, "eat_health" ) > 0.95 then
          eat_item( obj )
          return true
        end
      end
    end
    if db.actor.health < lim_health / 2 and find_and_eat( "suvorotka" ) then
      return true
    end
    if best_item then
      eat_item( best_item )
      return true
    end
  elseif
    (
      db.actor:get_bleeding() > lim_bleed
      or ( db.actor.health < lim_health and db.actor:get_bleeding() > 0.1 )
    )
  then
    for _, sect in ipairs({ "maz", "bandage" }) do
      if find_and_eat( sect ) then return true end
    end
  end
  return false
end


function eat_item( obj )
  play_snd( [[hev\administering-anti-rad]] )
  db.actor:give_info_portion( "biznes_remove_special_item" )
  dsh_medkit.set_silence( true  )
  -- local eatable = obj:get_eatable_item()
  -- ASSERT( eatable, "[%s]: %s is not an eatable", script_name(), obj:name() )
  -- if eatable.eat_power < 0 then
  --   eatable.eat_power = 0
  -- end
  db.actor:eat( obj )
  dsh_medkit.set_silence( false )
  db.actor:disable_info_portion( "biznes_remove_special_item" )
end


function find_item( item )
  local found, t = amk_utils.inventory_search_check( { [ item ] = 1 } )
  if found then
    return t[ 1 ]
  end
end


function find_and_eat( item )
  local obj = find_item( item )
  if obj then
    eat_item( obj )
    return true
  end
  return false
end


function new_system_rad()
  if not cfg.radiation then return false end
  if dsh_medkit.restoring( "radiation_restore_speed" ) then return false end
  if db.actor.radiation > 0.9 and find_and_eat( "antirad" ) then
    return true
  end
  if
    db.actor.radiation > lim_radiation
    and (
      db.actor.health < lim_health
      or (
        db.actor.health < 0.9
        and dsh_medkit.restoring( "health_restore_speed" )
      )
    )
  then
    local medkits
    if not dsh_medkit.restoring( "health_restore_speed" ) then
      medkits = { "maz", "medkit_scientic", "antirad" }
    else
      medkits = { "maz", "antirad", "medkit_scientic" }
    end
    local best_item
    for _, sect in ipairs( medkits ) do
      local obj = find_item( sect )
      if obj then
        best_item = obj
        if db.actor.radiation + get_float( sect, "eat_radiation" ) < 0.05 then
          eat_item( obj )
          return true
        end
      end
    end
    if db.actor.radiation > 0.9 and find_and_eat( "suvorotka" ) then
      return true
    end
    if best_item then
      eat_item( best_item )
      return true
    end
  end
  return false
end


function new_anti_dot()
  if not cfg.health then return false end
  if
    db.actor.psy_health < lim_psy_health
    and not dsh_medkit.restoring( "psy_health_restore_speed" )
  then
    local medkits
    if
      (
        db.actor.health < lim_health
        and not dsh_medkit.restoring( "health_restore_speed" )
      )
      or (
        db.actor.radiation > lim_radiation
        and not dsh_medkit.restoring( "radiation_restore_speed" )
      )
    then
      medkits = { "suvorotka", "antizombie" }
    else
      medkits = { "antizombie", "suvorotka" }
    end
    for _, sect in ipairs( medkits ) do
      if find_and_eat( sect ) then
        return true
      end
    end
  end
  return false
end


function new_system_power()
  if not cfg.power then return false end
  if
    db.actor.power < lim_power
    and not dsh_medkit.restoring( "power_restore_speed" )
  then
    if find_and_eat( "energy_drink" ) then
      return true
    end
  end
  return false
end


function exo_in_section( item )
  local itm = item:section()
  if itm == "exo_mil_exoskeleton_addr" then
    alife():create(
      itm, db.actor:position(),
      db.actor:level_vertex_id(), db.actor:game_vertex_id(),
      db.actor:id()
    )
    alife():release( alife():object( item:id() ) )
  end
end


function have_item_namber( itm, need_namber )
  return amk_utils.inventory_search( itm, need_namber )
end


function delete_some_somth( section, count )
  amk_utils.out_items_number({
    [ section ] = count,
  })
end


function dbglog( fmt, ... )
  local msg = string.format( fmt, ... )
  local msg_no_ws = string.gsub( msg, "%s", "_" )
  log1( "dbg:" .. msg_no_ws )
end


function play_snd( snd )
  local snd_obj = xr_sound.get_safe_sound_object( snd )
  snd_obj:play_no_feedback( db.actor, sound_object.s2d, 0, vector():set( 0, 0, 0 ), 1.0 )
end
