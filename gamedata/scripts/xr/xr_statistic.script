-- -*- mode: lua; coding: windows-1251-dos -*-

-- выкинуты все ранги, группировки и прочее, просто тупо считается количество всех убитых неписей/монстров

local communityByCommunity = {
  [ "arena_enemy" ] = "arena_enemy",
  [ "bandit"      ] = "bandit",
  [ "dolg"        ] = "dolg",
  [ "ecolog"      ] = "ecolog",
  [ "freedom"     ] = "freedom",
  [ "green"       ] = "green",
  [ "killer"      ] = "killer",
  [ "lastday"     ] = "lastday",
  [ "military"    ] = "military",
  [ "monolith"    ] = "monolith",
  [ "nebo"        ] = "nebo",
  [ "sniper"      ] = "sniper",
  [ "stalker"     ] = "neutral",
  [ "trader"      ] = "trader",
  [ "vermaht"     ] = "vermaht",
  [ "zombied"     ] = "zombied",
}

-- при добавлении новых монстров добавлять в info_known_objects.xml поршень "stat_"..секция монстра и в stable_statistic_caption.xml название монстра
local monster_types = {
	"dog_wolf",
	"wolf",
	"fracture_weak",
	"fracture_normal",
	"fracture_strong",
	"fracture_master",
	"fracture_karlik",
	"fracture",
	"carlic_weak",
	"carlic_strong",
	"karlito",
	"carlic",
	"vypolzen_red",
	"vypolzen",
	"psy_dog",
	"pseudodog_weak",
	"pseudodog_normal",
	"pseudodog_strong",
	"pseudodog_big",
	"volkodav",
	"pseudodog",
	"rotan",
	"electro_tushkano_normal",
	"tushkano_normal",
	"tushkano_strong",
	"tushkano",
	"nosales",
	"bloodsucker_weak",
	"bloodsucker_normal",
	"bloodsucker_strong",
	"bloodsucker_mil",
	"bloodsucker_effector",
	"bloodsucker_hell",
	"zombie_hell15",
	"bloodsucker_child",
	"bloodsucker",
	"oboroten",
	"m_controller_normal_fat",
	"m_controller_normal",
	"m_controller_old_fat",
	"m_controller_old",
	"controller_tubeman",
	"controller_senator",
	"controller_babka",
	"m_controller_act",
	"controller_flame",
	"controller",
	"psyonik",
	"gigant_weak",
	"gigant_normal",
	"gigant_strong",
	"gigant_red_strong",
	"gigant_big_strong",
	"gigant_virus_strong",
	"gigant_jumper_normal",
	"gigant_jumper_strong",
	"gigant_super_jumper",
	"gigant",
	"burer_weak",
	"burer_normal",
	"burer_strong",
	"burer_electro",
	"burer_build",
	"burer",
	"chimera_weak",
	"chimera_normal",
	"chimera_strong",
	"chimera_x_ray",
	"chimera_black",
	"fire_chimera",
	"new_electro_chimera",
	"electro_chimera",
	"bear",
	"chimera",
	"tarakan_normal",
	"tarakan_strong",
	"tarakan",
	"m_poltergeist_normal_tele",
	"m_poltergeist_tele_outdoor",
	"m_poltergeist_normal_flame",
	"m_poltergeist_strong_flame",
	"poltergeist_build",
	"m_poltergeist_dd",
	"electro_polter",
	"polter_xray",
	"poltergeist",
	"bibliotekar_black",
	"bibliotekar",
	"deathclaw_weak",
	"deathclaw_normal",
	"deathclaw_strong",
	"deathclaw",
	"new_hell",
	"flesh_weak",
	"flesh_normal",
	"flesh_strong",
	"flesh_swamp",
	"flesh",
	"zanoza",
	"boar_weak",
	"boar_mini",
	"boar_normal",
	"boar_strong",
	"molerat",
	"boar_kachok",
	"kikimora",
	"boar",
	"spider",
	"snork_weak",
	"snork_normal",
	"snork_stronger",
	"snork_strong",
	"snork_outdoor",
	"snork_indoor",
	"aes_snork",
	"snork_jumper",
	"snork",
	"rat_weak",
	"rat_normal",
	"rat_strong",
	"rat",
	"cat_weak",
	"cat_normal",
	"cat_strong",
	"cat",
	"dog_weak",
	"dog_normal",
	"dog_strong",
	"dog_skeleton",
	"dog_green",
	"dog_sil_hill",
	"dog_zombie",
	"dog_habaruch",
	"dog",
	"zombie_trup2",
	"zombie_trup",
	"zombie_weak",
	"zombie_normal",
	"zombie_ghost",
	"zombie_blow",
	"zombie_beee",
	"zombie_plague_komar",
	"zombie_plague",
	"zombie_hell14",
	"zombie_hell13",
	"zombie_hell12",
	"zombie_hell11",
	"zombie_hell10",
	"zombie_hell1",
	"zombie_hell2",
	"zombie_hell3",
	"zombie_hell4",
	"zombie_hell5",
	"zombie_hell6",
	"zombie_hell7",
	"zombie_hell8",
	"zombie_hell9",
	"zombie_babka_weak",
	"zombie_babka_normal",
	"zombie_immortal",
	"zombie_babka_strong",
	"zombie_strong",
	"zombie_hell",
	"zombie",
	"scelet",
	"ghoul",
	"vodjanoj",
}

function getNpcType(npc)
	if npc == nil then
		return nil
	end
	
	local section = npc:section()
	local community
	
	if db.actor:active_item() then
		local wpn = db.actor:active_item()
		if wpn:section() == "wpn_kuvalda" then
			archievements.acv_count_2event("acv_kuv", 100, game.translate_string( "acv_kuv" ), "acv_kuv2", 300, game.translate_string( "acv_kuv2" ))
		elseif wpn:section() == "wpn_topor" then
			archievements.acv_count_2event("acv_top", 100, game.translate_string( "acv_top" ), "acv_top2", 300, game.translate_string( "acv_top2" ))
		elseif wpn:section() == "wpn_crowbar" then
			archievements.acv_count_2event("acv_crow", 100, game.translate_string( "acv_crow" ), "acv_crow2", 300, game.translate_string( "acv_crow2" ))
		elseif wpn:section() == "wpn_machete" then
			archievements.acv_count_2event("acv_mach", 100, game.translate_string( "acv_mach" ), "acv_mach2", 300, game.translate_string( "acv_mach2" ))
		elseif wpn:section() == "wpn_kukri" then
			archievements.acv_count_2event("acv_kuk", 100, game.translate_string( "acv_kuk" ), "acv_kuk2", 300, game.translate_string( "acv_kuk2" ))
		elseif (string.find(wpn:section(), "ognemet") or string.find(wpn:section(), "flame")) and IAmAMonster[npc:clsid()] then	
		    archievements.acv_count_event("acv_pir", 100, game.translate_string( "acv_pir" ))
		end
	end

	if IAmAMonster[npc:clsid()] then
		if npc:clsid() == clsid.poltergeist_s then
			archievements.acv_count_event("acv_ftom", 50, game.translate_string( "acv_ftom" ))   
		end
		
		if string.find(section, "gigant") then
			archievements.acv_count_event("acv_gob", 50, game.translate_string( "acv_gob" ))
		elseif string.find(section, "chimera") and db.actor:active_slot() == 0 then
			archievements.acv_count_event("acv_ukro", 50, game.translate_string( "acv_ukro" ))
		elseif string.find(section, "rat") then
			archievements.acv_count_event("acv_krs", 100, game.translate_string( "acv_krs" ))
		elseif string.find(section, "bloodsucker") and db.actor:active_slot() == 0 then
			archievements.acv_count_event("acv_gum", 50, game.translate_string( "acv_gum" ))  
		elseif string.find(section, "vodjanoj") then
			archievements.acv_count_event("acv_bbk", 40, game.translate_string( "acv_bbk" )) 
		elseif string.find(section, "deathclaw") and db.actor:active_slot() == 0 then
			archievements.acv_count_event("acv_tigr", 10, game.translate_string( "acv_tigr" ))  
		elseif string.find(section, "controller") then
			archievements.acv_count_event("acv_mgvd", 50, game.translate_string( "acv_mgvd" )) 
		elseif string.find(section, "burer") then
			archievements.acv_count_event("acv_lxlt", 50, game.translate_string( "acv_lxlt" )) 
		elseif string.find(section, "snork") then
			archievements.acv_count_event("acv_tprg", 50, game.translate_string( "acv_tprg" )) 
		elseif string.find(section, "flesh") then
			archievements.acv_count_event("acv_svin", 50, game.translate_string( "acv_svin" )) 
		elseif string.find(section, "boar") then
			archievements.acv_count_event("acv_barb", 50, game.translate_string( "acv_barb" )) 
		elseif string.find(section, "vypolzen") then
			archievements.acv_count_event("acv_xob", 50, game.translate_string( "acv_xob" )) 
		elseif string.find(section, "carlic") then
			archievements.acv_count_event("acv_guli", 50, game.translate_string( "acv_guli" ))
		end
	end
	
	if IsStalker(npc) then
		community = communityByCommunity[npc:character_community()]
		if not community then
			return nil, nil -- community = "neutral"
		end
		local rank = ranks.get_obj_rank_name(npc)
		
		archievements.acv_kill()
		if community == "killer" then
			archievements.acv_count_event("acv_anki", 100, game.translate_string( "acv_anki" ))
		elseif community == "bandit" then
			archievements.acv_count_event("acv_ment", 150, game.translate_string( "acv_ment" ))  
		elseif community == "monolith" then
			archievements.acv_count_event("acv_vrgm", 150, game.translate_string( "acv_vrgm" )) 
		elseif community == "vermaht" then
			archievements.acv_count_event("acv_prtz", 50, game.translate_string( "acv_prtz" ))	  
		end
		
		return "stalkerkills", community.."_"..rank
		
	elseif string.find(section, "helicopter") then
		archievements.acv_mons()
		return "monsterkills", "helicopter"
	
	elseif string.find( section, "vehicle_btr" ) or string.find( npc:get_visual_name(), "btr" ) then
		archievements.acv_mons()
		return "monsterkills", "vehicle_btr"
	
	elseif npc:is_monster() then
		for _,k in ipairs(monster_types) do
			if string.find(section, k) then
				community = k
				break
			end
		end
		
		if not community then
			--abort("Statistic ERROR: cannot find monstr class for [%s]", npc:name())
			return nil, nil
		end

		if npc:clsid() == clsid.zombie_s then
			archievements.acv_count_event("acv_zoms", 1000, game.translate_string( "acv_zoms" ))
		end
		archievements.acv_mons()

		return "monsterkills", ( community or section )
	end	
end


function addKillCount( killer, npc )
  if not ( npc and killer ) then return end

  if not killer:is_actor() then
    if killer:is_stalker() then
      if npc:is_stalker() and npc:character_rank() > killer:character_rank() then
        killer:set_character_rank( npc:character_rank() )
      else
        local inc = 100
        if killer:character_rank() < db.actor:character_rank() then
          inc = inc + ( db.actor:character_rank() - killer:character_rank() )
        end
        killer:change_character_rank( math.random( 1, inc ) )
      end
    end
    return
  end

  -- сон в Пещере не считаем
  if db.actor:has_info( "peshera_go" ) then return end

  local props, sect_name = getNpcType( npc )
  if props == nil or sect_name == nil then return end

  if not db.actor:has_info( "stat_" .. sect_name ) then
    db.actor:give_info_portion( "stat_" .. sect_name )
  end

  actor_stats.add_points( props, sect_name, 1, 1 )
  add_actor_rank( 1 )
end


-- считаем квесты
function add_task()
	amk.save_variable("AS_T", amk.load_variable("AS_T", 0)+1)
end
function add_subtask()
	amk.save_variable("AS_ST", amk.load_variable("AS_ST", 0)+1)
end

-- окно дополнительной статистики 
class "QuestStat" (CUIScriptWnd)

function QuestStat:__init(owner) super()
   self.owner = owner
   self:InitControls()
end

function QuestStat:InitControls()
	self:SetWndRect(70,480,240,120)
	self:Show(true)
	self.owner:AttachChild(self)

	self.task_st = CUIStatic()
	self.task_st:SetAutoDelete(true)
	self.task_st:SetFont(GetFontLetterica18Russian())
	self.task_st:SetWidth(200)
	self.task_st:SetHeight(20)
	self.task_st:SetTextColor(160,170,170,170)
	self.task_st:SetTextAlign(CGameFont.alLeft)
	self.task_st:SetText(game.translate_string("st_pda_tasks"))
	self:AttachChild(self.task_st)

	self.task = CUIStatic()
	self.task:SetAutoDelete(true)
	self.task:SetFont(GetFontLetterica18Russian())
	self.task:SetWidth(25)
	self.task:SetHeight(20)
	self.task:SetTextColor(200,255,255,255)
	self.task:SetTextAlign(CGameFont.alRight)
	self.task:SetTextX(210)
	self.task:SetText(tostring(amk.load_variable("AS_T", 0)))
	self:AttachChild(self.task)

	self.subtask_st = CUIStatic()
	self.subtask_st:SetAutoDelete(true)
	self.subtask_st:SetFont(GetFontLetterica18Russian())
	self.subtask_st:SetWidth(200)
	self.subtask_st:SetHeight(20)
	self.subtask_st:SetTextY(25)
	self.subtask_st:SetTextColor(160,170,170,170)
	self.subtask_st:SetTextAlign(CGameFont.alLeft)
	self.subtask_st:SetText(game.translate_string("st_pda_subtasks"))
	self:AttachChild(self.subtask_st)

	self.subtask = CUIStatic()
	self.subtask:SetAutoDelete(true)
	self.subtask:SetFont(GetFontLetterica18Russian())
	self.subtask:SetWidth(25)
	self.subtask:SetHeight(20)
	self.subtask:SetTextColor(200,255,255,255)
	self.subtask:SetTextAlign(CGameFont.alRight)
	self.subtask:SetTextX(210)
	self.subtask:SetTextY(25)
	self.subtask:SetText(tostring(amk.load_variable("AS_ST", 0)))
	self:AttachChild(self.subtask)

	self.task_total_st = CUIStatic()
	self.task_total_st:SetAutoDelete(true)
	self.task_total_st:SetFont(GetFontLetterica18Russian())
	self.task_total_st:SetWidth(200)
	self.task_total_st:SetHeight(20)
	self.task_total_st:SetTextY(70)
	self.task_total_st:SetTextColor(230,180,180,180)
	self.task_total_st:SetTextAlign(CGameFont.alLeft)
	self.task_total_st:SetText(game.translate_string("st_pda_tasks_totals"))
	self:AttachChild(self.task_total_st)

	self.task_total = CUIStatic()
	self.task_total:SetAutoDelete(true)
	self.task_total:SetFont(GetFontLetterica18Russian())
	self.task_total:SetWidth(25)
	self.task_total:SetHeight(20)
	self.task_total:SetTextColor(200,255,255,255)
	self.task_total:SetTextAlign(CGameFont.alRight)
	self.task_total:SetTextX(210)
	self.task_total:SetTextY(70)
	self.task_total:SetText(tostring(amk.load_variable("AS_T", 0)+amk.load_variable("AS_ST", 0)))
	self:AttachChild(self.task_total)

	self.death_st = CUIStatic()
	self.death_st:SetAutoDelete(true)
	self.death_st:SetFont(GetFontLetterica18Russian())
	self.death_st:SetWidth(200)
	self.death_st:SetHeight(20)
	self.death_st:SetTextY(105)
	self.death_st:SetTextColor(160,170,170,170)
	self.death_st:SetTextAlign(CGameFont.alLeft)
	self.death_st:SetText(game.translate_string("st_pda_actor_deaths"))
	self:AttachChild(self.death_st)

	self.death = CUIStatic()
	self.death:SetAutoDelete(true)
	self.death:SetFont(GetFontLetterica18Russian())
	self.death:SetWidth(25)
	self.death:SetHeight(20)
	self.death:SetTextColor(200,255,255,255)
	self.death:SetTextAlign(CGameFont.alRight)
	self.death:SetTextX(210)
	self.death:SetTextY(105)
	self.death:SetText(tostring(archievements.get_death_count("death")))
	self:AttachChild(self.death)

	self.game_st = CUIStatic()
	self.game_st:SetAutoDelete(true)
	self.game_st:SetFont(GetFontLetterica18Russian())
	self.game_st:SetWidth(200)
	self.game_st:SetHeight(20)
	self.game_st:SetTextY(130)
	self.game_st:SetTextColor(160,170,170,170)
	self.game_st:SetTextAlign(CGameFont.alLeft)
	self.game_st:SetText(game.translate_string("st_pda_actor_games"))
	self:AttachChild(self.game_st)

	self.game = CUIStatic()
	self.game:SetAutoDelete(true)
	self.game:SetFont(GetFontLetterica18Russian())
	self.game:SetWidth(25)
	self.game:SetHeight(20)
	self.game:SetTextColor(160,170,170,170)
	self.game:SetTextAlign(CGameFont.alRight)
	self.game:SetTextX(210)
	self.game:SetTextY(145)
	self.game:SetText(gametime(archievements.get_death_count("game")))
	self:AttachChild(self.game)
end 

function QuestStat:HideWnd()
	self.owner:DetachChild(self)
end

local quest_stat = nil

function ShowQuestStat()
	if not quest_stat then
		quest_stat = QuestStat(level.main_input_receiver())
	end
end

function HideQuestStat()
	if quest_stat then
		quest_stat:HideWnd()
	end
	quest_stat = nil
end

-- строка времени игры
function gametime(time)
	time = math.floor(time*1.1+0.5)
	local str = ""
	local val = 0
	
	if time >= 60*24*365 then
		val = math.floor(time/(60*24*365))
		time = time-val*60*24*365
		str = str.." "..tostring(val).." "..timename(val,"год","года","лет")
	end

	if time >= 60*24*30.417 then
		val = math.floor(time/(60*24*30.417))
		time = time-math.floor(val*60*24*30.417+0.5)
		str = str.." "..tostring(val).." "..timename(val,"месяц","месяца","месяцев")
	end

	if time >= 60*24 then
		val = math.floor(time/(60*24))
		time = time-val*60*24
		str = str.." "..tostring(val).." "..timename(val,"день","дня","дней")
	end

	if time >= 60 then
		val = math.floor(time/60)
		time = time-val*60
		str = str.." "..tostring(val).." "..timename(val,"час","часа","часов")
	end

--	if time > 0 then
--		str = str.." "..tostring(time).." "..timename(time,"минута","минуты","минут")
--	end
	return str
end

function timename(val,s1,s2,s3)
	if val > 20 then
		val = math.fmod(val,10)
	end
	if val == 0 or val >= 5 then
		return s3
	elseif val >= 2 then
		return s2
	else
		return s1
	end
end


function add_actor_rank( value )
  db.actor:change_character_rank( value )
  local rank = db.actor:character_rank()
  if rank >= 10000 and rank < 10100 then
    db.actor:give_info_portion( "acv_rank1" )
  elseif rank >= 30000 and rank < 30100 then
    db.actor:give_info_portion( "acv_rank2" )
  elseif rank >= 50000 and rank < 50100 then
    db.actor:give_info_portion( "acv_rank3" )
  end
end
