-- -*- mode: lua; coding: windows-1251-dos -*-
--
-- Отрезание запчастей монстров ножом и озвучка.

function attach( sm )
  sm:subscribe({ signal = "init_car_body", fun = this.init_car_body })
  sm:subscribe({ signal = "on_body_hide",  fun = this.on_body_hide  })
  sm:subscribe({ signal = "on_body_open",  fun = this.on_body_open  })
end


local monster, subscribed
function on_body_hide()
  if monster then
    db.actor:clear_marked_visible()
  end
  monster = nil
  if subscribed then
    ogse_signals.get_mgr():unsubscribe( subscribed )
    subscribed = nil
  end
end


function on_body_open( npc )
  local obj = level.get_target_obj()
  if obj:is_monster() and not obj:alive() then
    monster = obj
    if not subscribed then
      subscribed = { signal = "on_take", fun = this.on_part_take }
      ogse_signals.get_mgr():subscribe( subscribed )
    end
  else
    monster = nil
  end
end


function init_car_body( body )
  if monster then return end
  if body:is_monster() and not body:alive() then
    local knife = db.actor:item_in_slot( 0 )
    if not knife then return end
    db.actor:mark_item_visible( knife )
    for i = 0, body:object_count() - 1 do
      local obj = body:object( i )
      if alife():object( obj:id() ) and not body:marked_dropped( obj ) then
        db.actor:mark_item_visible( obj )
      end
    end
  end
end


local snd
function on_part_take( obj )
  if not monster then return end
  if not get_bool( obj:section(), "monster_part", false ) then return end
  local spawn = get_string( monster:section(), "Spawn_Inventory_Item_Section" )
  if not spawn then return end
  local t = parse_names( spawn )
  local known = false
  for i = 1, table.getn( t ), 2 do
    if t[ i ] == obj:section() then
      known = true
      break
    end
  end
  if not known then return end
  process_knife( obj )
  if snd and snd:playing() then snd:stop() end
  snd = xr_sound.get_safe_sound_object(
    "zwuk_short\\inv_mutant_loot_" .. math.random( 1, 9 )
  )
  snd:play_at_pos( db.actor, vector():set( 0, 0, 0 ), 0, sound_object.s2d )
  archievements.acv_count_event( "acv_gvdr", 500, game.translate_string( "acv_gvdr" ) )
end


local good_knife_cond = 0.9
local base_knife_hit  = 2.2

function process_knife( obj )
  local knife = db.actor:item_in_slot( 0 )
  if knife and knife:condition() > 0 then
    if knife:condition() < good_knife_cond then
      local k = knife:condition() / good_knife_cond
      obj:set_condition( obj:condition() * k )
    end
    local knife_cond_dec = get_float(
      knife:section(), "condition_shot_dec_on_hit", 0
    )
    if knife_cond_dec > 0 then
      local hit_power_2 = get_float(
        knife:section(), "hit_power_2", base_knife_hit
      )
      knife_cond_dec = knife_cond_dec * ( base_knife_hit / hit_power_2 )
      if knife:condition() > knife_cond_dec then
        knife:set_condition( knife:condition() - knife_cond_dec )
      else
        knife:set_condition( 0 )
      end
    end
  else
    obj:set_condition( 0 )
  end
end
