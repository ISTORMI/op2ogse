-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm )
  sm:subscribe({ signal = "on_spawn", fun = this.on_spawn })
  sm:subscribe({ signal = "on_first_update", fun = this.on_actor_first_update })
  sm:subscribe({ signal = "on_npc_death", fun = this.on_death     })
  sm:subscribe({ signal = "on_npc_first_update", fun = this.on_first_update })
  sm:subscribe({ signal = "on_npc_spawn", fun = this.on_npc_spawn })
end


function on_spawn()
  load_letters()
end


function on_actor_first_update()
  ogse_signals.get_mgr():subscribe({ signal = "on_take", fun = this.on_take })
end


local npc_rnd_keys = {
  "outfit_rnd", "outfit_cond_rnd", "weapon_cond_rnd",
}

function on_npc_spawn( npc, binder )
  local sobj = alife():object( npc:id() )
  if sobj then
    local ini  = sobj:spawn_ini()
    local sect = script_name()
    if ini:section_exist( sect ) then
      local t = {}
      binder[ sect ] = t
      for _, k in ipairs( npc_rnd_keys ) do
        t[ k ] = get_float( sect, k, nil, ini )
      end
    else
      ini.readonly = false
      local t = {}
      for _, k in ipairs( npc_rnd_keys ) do
        t[ k ] = math.random()
        ini:w_float( sect, k, t[ k ] )
      end
      sobj:save_spawn_ini()
      binder[ sect ] = t
    end
  end
end


function on_first_update( obj )
  if not obj:alive() then
    -- чистка лута у трупика из all.spawn, если еще не делалось.
    drop_manager( obj:id() ):create_release_item()
  end
end


function on_death( obj, who )
  -- чистка и генерация нового лута
  drop_manager( obj:id(), who:id() ):create_release_item()
end


local total_debug = false
function write_log( str, ... )
  if total_debug then
    log2( str, ... )
  end
end


local ammo_deferred_release = {}

-- Ключем является группировка персонажа. Значением является таблица,
-- содержашая имена секций предметов.
local item_by_community = {}

--' Множители и минимаксы для выпадения вещей в зависимости от уровня
local count_by_level = {}

--' Предметы, которые нельзя удалять (квестовые например)
local always_keep_item = {}

local always_offs_items = {
  [ "ammo_super_gauss" ] = true,
  [ "bolt"          ] = true,
  [ "device_pda"    ] = true,
  [ "device_torch"  ] = true,
  [ "hand_radio"    ] = true,
  [ "fake_grenades_base" ] = true,
  [ "gl_fake_missile" ] = true,
  [ "gl_fake_missile_ammo_m208a"  ] = true,
  [ "gl_fake_missile_ammo_m209"   ] = true,
  [ "gl_fake_missile_ammo_vog-25" ] = true,
  [ "gl_fake_missile_ammo_vog-25p"] = true,
  [ "gl_test_shell" ] = true,
  [ "gl_test_shell_ammo_m208a"   ] = true,
  [ "gl_test_shell_ammo_m209"    ] = true,
  [ "gl_test_shell_ammo_vog-25"  ] = true,
  [ "gl_test_shell_ammo_vog-25p" ] = true,
  [ "grenade_f1_fake"    ] = true,
  [ "grenade_f1_test"    ] = true,
  [ "grenade_flash_fake" ] = true,
  [ "grenade_flash_test" ] = true,
  [ "grenade_gd-05_fake" ] = true,
  [ "grenade_gd-05_test" ] = true,
  [ "grenade_rgd5_fake"  ] = true,
  [ "grenade_rgd5_test"  ] = true,
}

-- эти вещи остаются с указанной вероятностью
local always_offs_items_prob = {}

-- Таблица выдачи инфопорций по части имени погибшего непися.
local names_info = {
  -- [ "ecolog_wound_bunker" ] = "ucen_talk_est",
}

-- вероятность выпадения бронежилетов и диапазон состояний выпавших
-- бронежилетов и оружия
-- condition - диапазон состояний выпавших бронежилетов и оружия
-- probability_outfit - вероятность выпадения бронежилетов
local data_by_community = {
  default = {     -- значения по-умолчанию для неизвестной группировки
    condition          = { min = 5, max = 95 },
    probability_outfit = 15,
  },
  communities = {
    [ "military" ] = {
      condition          = { min = 5, max = 75 },
      probability_outfit = 20,
    },
    [ "killer"   ] = {
      condition          = { min = 5, max = 75 },
      probability_outfit = 15,
    },
    [ "monolith" ] = {
      condition          = { min = 5, max = 45 },
      probability_outfit = 15,
    },
    [ "zombied"  ] = {
      condition          = { min = 5, max = 35 },
      probability_outfit = 15,
    },
    [ "bandit"   ] = {
      condition          = { min = 5, max = 55 },
      probability_outfit = 15,
    },
    [ "stalker"  ] = {
      condition          = { min = 5, max = 70 },
      probability_outfit = 20,
    },
    [ "dolg"     ] = {
      condition          = { min = 5, max = 70 },
      probability_outfit = 20,
    },
    [ "freedom"  ] = {
      condition          = { min = 5, max = 70 },
      probability_outfit = 20,
    },
    [ "ecolog"   ] = {
      condition          = { min = 5, max = 70 },
      probability_outfit = 20,
    },
    [ "sniper"   ] = {
      condition          = { min = 5, max = 85 },
      probability_outfit = 15,
    },
    [ "green"    ] = {
      condition          = { min = 5, max = 70 },
      probability_outfit = 15,
    },
    [ "nebo"     ] = {
      condition          = { min = 5, max = 65 },
      probability_outfit = 20,
    },
    [ "lastday"  ] = {
      condition          = { min = 5, max = 60 },
      probability_outfit = 10,
    },
    [ "vermaht"  ] = {
      condition          = { min = 5, max = 95 },
      probability_outfit = 15,
    },
  }
}

-- Предметы, относящиеся к патронам. Их надо спаунить другим методом.
local ammo_sections = {}

function get_ammo_sections()
  return ammo_sections
end

local death_items = {}
function get_death_items()
  return death_items
end


function init_drop_settings()
  --' Предметы, относящиеся к патронам. Их надо спаунить другим методом.
  for i = 0, sys_ini:line_count( "death_generic.ammo_sections" ) - 1 do
    local result, id, value = sys_ini:r_line(
      "death_generic.ammo_sections", i, "", ""
    )
    ammo_sections[ id ] = true
  end

  local lsect        = "death_generic." .. level.name()
  local mul_by_level = {}
  if not sys_ini:section_exist( lsect ) then
    lsect = "death_generic.default"
  end
  for i = 0, sys_ini:line_count( lsect ) - 1 do
    local result, id, value = sys_ini:r_line( lsect, i, "", "" )
    mul_by_level[ id ] = tonumber( value )
  end

  for k, v in pairs( data_by_community.communities ) do
    -- Необходимо заполнить таблицу
    local sect = "death_generic." .. k
    if sys_ini:section_exist( sect ) then
      item_by_community[ k ] = {}
      for i = 0, sys_ini:line_count( sect ) - 1 do
        local result, id, value = sys_ini:r_line( sect, i, "", "" )
        local rnd = tonumber( value )
        if mul_by_level[ id ] then
          rnd = rnd * mul_by_level[ id ]
        end
        if rnd > 0 then
          item_by_community[ k ][ id ] = rnd
          death_items[ id ] = true
        end
      end
    end
  end
  ASSERT(
    item_by_community.stalker,
    "[%s]: death_generic.stalker is mandatory section"
  )

  -- Множители и минимаксы для выпадения вещей в зависимости от уровня
  local item_count_section = "death_generic.item_count_3"
  for i = 0, sys_ini:line_count( item_count_section ) - 1 do
    local result, id, value = sys_ini:r_line( item_count_section, i, "", "" )
    -- Нужно распарсить value в два значения
    local t = parse_nums( value )
    ASSERT(
      t[1],
      "Error on [death_ini] declaration. Section [%s], line [%s]",
      item_count_section, tostring(id)
    )
    local count_min = t[ 1 ]
    local count_max = t[ 2 ]
    if not count_max then count_max = count_min end
    count_by_level[ id ] = { min = count_min, max = count_max }
  end

  -- Предметы, которые нельзя удалять (квестовые например)
  for i = 0, sys_ini:line_count( "death_generic.keep_items" ) - 1 do
    local result, id, value = sys_ini:r_line(
      "death_generic.keep_items", i, "", ""
    )
    always_keep_item[ id ] = true
  end
end


local level_recipient_rnd_coef = {
--  [ "l11_pripyat" ] = 0,
}

class "drop_manager"
function drop_manager:__init( npc_id, who_id )
  local npc = level.object_by_id( npc_id )
  local who
  if who_id then
    who = level.object_by_id( who_id )
  end
  self.npc = npc
  self.who = who

  if
    npc and npc:character_community() ~= "zombied"
    and who and who:id() ~= db.actor:id() and who:id() ~= npc:id()
    and ( IsStalker( who ) or IsMonster( who ) )
  then
    local rnd = level_recipient_rnd_coef[ level.name() ] or 0.1
    local is_lucky = dsh_ogse_relations.has_enough_reputation()
      and math.random() < rnd
    if
      watcher_act.is_quest_npc( who )
      or IsMonster( who )
      or who:character_community() == "zombied"
    then
      if is_lucky then
        self.recipient = npc
      end
    else
      if who:relation( db.actor ) ~= game_object.enemy then
        if is_lucky then
          self.recipient = npc
        else
          self.recipient = who
        end
      end
    end
  else
    self.recipient = npc
  end
end


function drop_manager:get_recipient()
  return self.recipient
end


function drop_manager:set_weapon_drop_condition( item )
  local data
  if self.npc then
    data = data_by_community.communities[ self.npc:character_community() ]
    if not data then
      data = data_by_community.default
    end
  else
    data = data_by_community.default
  end
  local cond     = data.condition
  local cond_add = 0
  self:set_weapon_condition( item, cond, cond_add )
end


local cached_wpn_info = {}
function get_ammo_for_weapon( wpn )
  local sect = wpn:section()
  if not cached_wpn_info[ sect ] then
    local t = {}
    cached_wpn_info[ sect ] = t
    local ammo_class = get_string( sect, "ammo_class"    )
    if ammo_class then
      t.ammo = {}
      for _, k in ipairs( parse_names( ammo_class ) ) do
        t.ammo[ k ] = true
      end
    end
    local grenade_class = get_string( sect, "grenade_class" )
    if grenade_class then
      t.grenade = {}
      for _, k in ipairs( parse_names( grenade_class ) ) do
        t.grenade[ k ] = true
      end
    end
  end
  return cached_wpn_info[ sect ]
end


function get_spawn_items( comm )
  return item_by_community[ comm ] or item_by_community.stalker
end


function drop_manager:create_release_item()
  if not self.npc then return end

  if names_info[ self.npc:name() ] then
    db.actor:give_info_portion( names_info[ self.npc:name() ] )
  end

  -- Спрашиваем у серверного объекта генерились ли предметы
  local se_obj = alife():object( self.npc:id() )
  if not se_obj then return end
  if se_obj.death_droped then return end
  se_obj.death_droped = true

  local data = data_by_community.communities[ self.npc:character_community() ]
  if not data then
    data = data_by_community.default
  end

  local cond     = data.condition
  local cond_add = 0

  --' Запускаем итератор на удаление предметов
  local can_have_ammo = {}
  local items         = {}
  self.npc:iterate_inventory(
    function( npc, item )
      if item:is_weapon() then
        local t = get_ammo_for_weapon( item )
        if t.ammo then
          for k, _ in pairs( t.ammo ) do
            can_have_ammo[ k ] = true
          end
        end
        if
          t.grenade
          and item:is_weapon_gl()
          and (
            ogse_wpn_utils.get_grenade_launcher_status( item ) == 1
            or (
              ogse_wpn_utils.get_grenade_launcher_status( item ) == 2
              and ogse_wpn_utils.get_grenade_launcher_flag( item )
            )
          )
        then
          for k, _ in pairs( t.grenade ) do
            can_have_ammo[ k ] = true
          end
        end
      end
      local t = {
        [ "item" ] = item,
      }
      table.insert( items, t )
    end,
    self.npc
  )
  for _, t in ipairs( items ) do
    if not self:keep_item( t.item ) then
      t.item = nil
    end
  end
  -- чистим стволы и задаем им состояние
  self:npc_clear_spawn( items, cond.min, cond.max, cond_add )

  -- Проверка на отсутствие спауна лута
  local ini = self.npc:spawn_ini()
  local who = self:get_recipient()
  if ( ini and ini:section_exist( "dont_spawn_loot" ) ) or not who then
    return
  end

  --' Доспавниваем необходимое количество итемов:
  --' Необходимо составить список объектов которые могут быть
  --заспавнены для персонажа
  local spawn_items = get_spawn_items( self.npc:character_community() )
  if spawn_items and who then
    for k, v in pairs( spawn_items ) do
      --' По каждому объекту необходимо получить зависимости
      if can_have_ammo[ k ] or not ammo_sections[ k ] then
        -- По каждому объекту необходимо получить количество
        if count_by_level[ k ] then
          local number = math.random(
            count_by_level[ k ].min, count_by_level[ k ].max
          )
          -- Необходимо заспавнить нужное количество.
          create_items( who, k, number, v )
        end
      end
    end
  end

  --' Даем письмо
  give_letter( self.npc )

  local npc_name = protected_items.get_obj_name( self.npc )
  if
    who and not (
      string.find( self.npc:section(), "arena" )
      or self.npc:character_community() == "arena_enemy"
      or npc_name == "yan_specnaz_dead"
      or npc_name == "x16_stalker_ghost"
    )
  then
    local _, sect = amkii_equip.get_npc_current_visual( self.npc )
    if sect then
      local otf
      local rnd = self:get_npc_rnd( "outfit_rnd" )
      if rnd * 1000 <= data.probability_outfit * 10 then
        otf = alife():create(
          sect,
          who:position(), who:level_vertex_id(), who:game_vertex_id(),
          who:id()
        )
      end
      if otf then
        local rnd = self:get_npc_rnd( "outfit_cond_rnd" )
        level.client_spawn_manager():add(
          otf.id, -1, function( id, obj )
            rnd = cond.min + round( rnd * ( cond.max - cond.min ) )
            obj:set_condition( ( rnd + cond_add ) / 100 )
          end
        )
      end
    end
  end
end


function drop_manager:get_npc_rnd( k )
  local rnd
  if self.npc then
    local cfg = self.npc:binded_object()[ script_name() ]
    ASSERT( cfg, "no cfg found for %s", self.npc:name() )
    rnd = cfg[ k ]
    ASSERT( rnd, "no rnd found for %s using %s", self.npc:name(), k )
  else
    rnd = math.random()
  end
  return rnd
end


function drop_manager:set_weapon_condition( item_in_slot, cond, cond_add )
  local ini
  if self.npc then
    ini = self.npc:spawn_ini()
  end
  if item_in_slot and not is_unique_wpn( item_in_slot:section() ) then
    item_in_slot:unload_magazine()
    if ini and ini:section_exist( "totally_broken_weapon" ) then
      -- нужен полностью убитый ствол
      item_in_slot:set_condition( 0.01 )
    else
      local rnd = self:get_npc_rnd( "weapon_cond_rnd" )
      rnd = cond.min + round( rnd * ( cond.max - cond.min ) )
      local rnd_cond = ( rnd + cond_add ) / 100
      if item_in_slot:condition() > rnd_cond then
        item_in_slot:set_condition( rnd_cond )
      end
    end
  end
end


function shedule_release( item )
  if item then
    if not ammo_deferred_release[ item:id() ] then
      ammo_deferred_release[ item:id() ] = time_global()
    end
  end
end


--' Функция вызывается для каждого предмета, если вернет false то
-- предмет удалится.  Разве ? Удаление происходит прямо внутри
-- функции, а внешнему итератору наплевать на результат (sapsan)
function drop_manager:keep_item( item )
  if not ( self.npc and item ) then return false end
  local sobj = alife():object( item:id() )
  if not sobj then return false end
  local section = item:section()
  if
    always_offs_items[ section ]
    or (
      always_offs_items_prob[ section ]
      and math.random() < always_offs_items_prob[ section ]
    )
  then
    alife():release( sobj )
    return false
  end
  return true
end


function release_deferred_ammo()
  local ini = system_ini()
  for k, v in pairs( ammo_deferred_release ) do
    local game_object = level.object_by_id( k )
    local s_obj = alife():object( k )
    if not s_obj and not game_object then
      -- если нет ни геймобъекта ни серверного - удалилось как надо
      ammo_deferred_release[ k ] = nil
    elseif s_obj and game_object then
      -- если есть и то и другое - все ок, удаляем
      local parent = game_object:parent()
      if v < time_global() then
        local size = dunin_ammo.get_ammo_size( game_object )
        local box_size = ini:r_u32( s_obj:section_name(), "box_size" )
        if size ~= box_size and size > 0 then
          -- оставим эту пачку в покое
          if not parent then
            write_log(
              "!!AMMO_DEBUG DEBUG_DELETING_AMMO_NORMAL %s", tostring( s_obj.id )
            )
            alife():release( s_obj, true )
            ammo_deferred_release[ k ] = nil
          else
            write_log(
              "!!AMMO_DEBUG DEBUG_TELEPORT_AMMO %s", tostring( s_obj.id ) )
            parent:drop_item( game_object )
          end
        elseif size == box_size then
          -- эту пачку можно сразу удалить
          if not parent then
            write_log(
              "!!AMMO_DEBUG DEBUG_DELETING_AMMO_NORMAL %s", tostring( s_obj.id )
            )
            alife():release( s_obj, true )
            ammo_deferred_release[ k ] = nil
          else
            write_log(
              "!!AMMO_DEBUG DEBUG_TELEPORT_AMMO %s", tostring( s_obj.id )
            )
            parent:drop_item( game_object )
          end
        elseif size == 0 then
          if not parent then
            write_log(
              "!!AMMO_DEBUG DEBUG_DELETING_AMMO_ZERO %s", tostring( s_obj.id )
            )
            alife():release( s_obj, true )
            ammo_deferred_release[ k ] = nil
          else
            write_log(
              "!!AMMO_DEBUG DEBUG_TELEPORT_AMMO_ZERO %s", tostring( s_obj.id )
            )
            parent:drop_item( game_object )
          end
        end
      end
    elseif s_obj then
      -- если только серверный - срочно убиваем
      write_log( "!!AMMO_DEBUG DEBUG_AMMO_SRV %s", tostring( s_obj.id ) )
      alife():release( s_obj, true )
      ammo_deferred_release[ k ] = nil
    elseif game_object then
      -- если только геймобъект - он ещё не успел сдохнуть, сцуко, не
      -- трогаем его
      write_log( "!!AMMO_DEBUG DEBUG_DELETING_ONLY_GAMEOBJ" )
      -- ammo_deferred_release[k] = nil
    end
  end
end


--' Функция спавнит необходимое число предметов
function create_items( npc, section, number, rnd )
  if not npc then return end
  if IsMonster( npc ) then
    local max_weight = get_float(
      npc:section(), "death_manager.can_eat_max_weight"
    )
    if not max_weight then return end
    if npc:get_inventory_weight() > max_weight then return end
    if get_float( section, "inv_weight" ) > max_weight then return end
  end
  if ammo_sections[ section ] then
    if number > 0 and math.random() <= rnd then
      se_respawn.create_ammo(
        section,
        npc:position(), npc:level_vertex_id(), npc:game_vertex_id(),
        npc:id(),
        number
      )
    end
  else
    for i = 1, number do
      --' Проверяем вероятность появить каждый объект в отдельности
      local r = math.random()
      if r <= rnd then
        if dsh.is_artefact( section ) then
          local prop = amk_utils.get_item_props( section )
          if prop.has_af_dyn then
            section = amk_anoms.make_dyn_art_sect( section )
            prop    = amk_utils.get_item_props( section )
          end
          if math.random() < 0.1 then
            if prop.af_bio_sect then section = prop.af_bio_sect end
          end
        end
        alife():create(
          section,
          npc:position(), npc:level_vertex_id(), npc:game_vertex_id(),
          npc:id()
        )
      end
    end
  end
end


-- чистка оружия и других предметов, которые спавнятся через секцию
-- spawn в конфиге непися
function drop_manager:npc_clear_spawn( items, cond_min, cond_max, cond_add )
  local npc            = self.npc
  local who            = self:get_recipient()
  local active_item    = npc:active_item()
  local ammos          = {}
  local release_items  = {}
  local death_items    = get_death_items()
  local transfer_items = {}
  for _, t in ipairs( items ) do
    if t.item then
      local item    = t.item
      local section = item:section()
      if
        active_item and item:id() == active_item:id()
        and ( ( not who ) or who:id() ~= npc:id() )
      then
        npc:move_to_ruck( item )
      end
      if death_items[ section ] then
        table.insert( release_items, item )
      elseif item:is_weapon() and not is_unique_wpn( section ) then
        if who then
          item:unload_magazine()
          local rnd_cond = (
            math.random( cond_min, cond_max ) + cond_add
          ) / 100
          if item:condition() > rnd_cond then
            item:set_condition( rnd_cond )
          end
          if who:id() ~= npc:id() then
            table.insert( transfer_items, item )
          end
        else
          table.insert( release_items, item )
        end
      elseif ammo_sections[ section ] then
        -- чистим патроны
        if count_by_level[ section ] then
          local number = math.random(
            count_by_level[ section ].min, count_by_level[ section ].max
          )
          if number > 0 then
            table.insert( ammos, { sect = section, cnt = number } )
          end
        end
        table.insert( release_items, item )
      else
        if
          ( not watcher_act.do_not_touch( item ) )
          and ( not is_unique_wpn( section ) )
        then
          if who then
            if who:id() ~= npc:id() then
              table.insert( transfer_items, item )
            end
          else
            table.insert( release_items, item )
          end
        end
      end
    end
  end
  for _, item in ipairs( release_items ) do
    local found = level.object_by_id( item:id() )
    if found then
      if not found:parent() then
        local sobj = alife():object( found:id() )
        if sobj then
          alife():release( sobj )
        end
      elseif found:parent():id() == npc:id() then
        ogse.remove_item_from_inventory( found, npc )
      end
    end
  end
  for _, item in ipairs( transfer_items ) do
    local found = level.object_by_id( item:id() )
    if found then
      if not found:parent() then
        found:transfer_item( found, who )
      elseif found:parent():id() == npc:id() then
        npc:transfer_item( found, who )
      end
    end
  end
  -- доспавниваем взамен удаленных патронов
  if who then
    for k, v in pairs( ammos ) do
      create_items( who, v.sect, v.cnt, 1 )
    end
  end
end


function is_unique_wpn( sect )
  return get_bool( sect, "death_manager.unique_wpn", false )
end


-- Письма
local all_letters = {}

function load_letters()
  local i    = 1
  local ini  = ini_file( "misc\\letters.ltx" )
  local sect = "letter_1"
  while ini:section_exist( sect ) do
    if not db.actor:has_info( sect ) then
      local t = {
        [ "info" ] = sect,
      }
      local comms = get_string( sect, "communities", nil, ini )
      if comms then
        t.comms = {}
        for _, comm in ipairs( parse_names( comms ) ) do
          t.comms[ comm ] = true
        end
      end
      table.insert( all_letters, t )
    end
    i    = i + 1
    sect = "letter_" .. i
  end
  log2(
    "[%s]: %s / %s letters loaded",
    script_name(), table.getn( all_letters ), i - 1
  )
end


function give_letter( npc )
  if math.random() > 0.02 then return end
  if get_letter( npc ) then
    alife():create( "letter", vector():set( 0, 0, 0 ), 0, 0, npc:id() )
  end
end


-- Рандомное письмо
function get_letter( npc )
  local avail_letters = {}
  for i, t in ipairs( all_letters ) do
    t.index = i
    if ( not t.comms ) or t.comms[ npc:character_community() ] then
      table.insert( avail_letters, t )
    end
  end
  if table.getn( avail_letters ) > 0 then
    -- есть письмо
    local rnd = math.random( table.getn( avail_letters ) )
    local t   = avail_letters[ rnd ]
    db.actor:give_info_portion( t.info )
    table.remove( all_letters, t.index )
    return true
  end
  return false
end


function on_take( obj )
  if obj:section() == "letter" then
    ogse.remove_item_from_inventory( obj )
    archievements.acv_count_event( "acv_ptln", 30, game.translate_string( "acv_ptln" ) )
    return true
  end
end
