-- -*- mode: lua; coding: windows-1251-dos -*-

local how_long         = 60
local snd_in_use_name  = "affects\\heartbeat"
local use_medkit_order = { "medkit_army", "medkit_scientic", "medkit" }


function attach( sm ) -- для менеджера сигналов
  sm:subscribe({
    signal = "on_actor_before_use", fun = this.on_actor_before_use
  })
  sm:subscribe({
    signal = "on_before_actor_conditions_update",
    fun    = this.on_actor_conditions_update
  })
  sm:subscribe({ signal = "on_key_down",       fun = this.on_key_down       })
  sm:subscribe({ signal = "on_key_holding",    fun = this.on_key_hold       })
  sm:subscribe({ signal = "on_key_up",         fun = this.on_key_up         })
  sm:subscribe({ signal = "on_mm_return_game", fun = this.on_mm_return_game })
  sm:subscribe({ signal = "on_save",           fun = this.on_save           })
  sm:subscribe({ signal = "on_spawn",          fun = this.on_spawn          })
end


-- alcohol_influence
local cfg = {
  [ "eat_health"     ] = {
    [ "item_offset"   ] = "eat_health",
    [ "restore_speed" ] = "health_restore_speed",
  },
  [ "eat_power"      ] = {
    [ "item_offset"   ] = "eat_power",
    [ "restore_speed" ] = "power_restore_speed",
  },
  [ "eat_psy_health" ] = {
    [ "item_offset"   ] = "eat_psy_health",
    [ "restore_speed" ] = "psy_health_restore_speed",
  },
  [ "eat_radiation"  ] = {
    [ "item_offset"   ] = "eat_radiation",
    [ "negative"      ] = true,
    [ "restore_speed" ] = "radiation_restore_speed",
  },
}

local restore_speeds = {
  [ "alcohol_restore_speed"    ] = {
    [ "ttl"   ] = 0,
    [ "value" ] = 0,
  },
  [ "health_restore_speed"     ] = {
    [ "ttl"   ] = 0,
    [ "value" ] = 0,
  },
  [ "power_restore_speed"      ] = {
    [ "ttl"   ] = 0,
    [ "value" ] = 0,
  },
  [ "psy_health_restore_speed" ] = {
    [ "ttl"   ] = 0,
    [ "value" ] = 0,
  },
  [ "radiation_restore_speed"  ] = {
    [ "ttl"   ] = 0,
    [ "value" ] = 0,
  },
}


function on_actor_conditions_update( ext, dt )
  for k, v in pairs( restore_speeds ) do
    if v.ttl > 0 then
      ASSERT( ext[ k ], "%s not found", k )
      ext[ k ] = ext[ k ] + v.value
      v.ttl = v.ttl - dt
      if v.ttl <= 0 then
        on_timer_end( k )
      end
    end
  end
end


local snd_in_use
function on_spawn()
  for k, v in pairs( restore_speeds ) do
    local tname = "dsh_medkit." .. k
    v.ttl   = ogse.load_var_safe( tname .. ".ttl" ) or 0
    v.value = ogse.load_var_safe( tname ) or 0
  end
  local pp = ogse.load_var_safe( "dsh_medkit.pp" )
  if pp then
    level.add_pp_effector( pp .. ".ppe", 1021, true )
  end
  local snd = ogse.load_var_safe( "dsh_medkit.snd" )
  if snd then
    snd_in_use = xr_sound.get_safe_sound_object( snd )
    snd_in_use:play(
      db.actor, 0, sound_object.s2d + sound_object.looped
    )
  end
  rebind_use_bandage()
  rebind_use_medkit()
end


function on_save()
  for k, v in pairs( restore_speeds ) do
    if v.ttl > 0 then
      ogse.save_var( "dsh_medkit." .. k .. ".ttl", v.ttl   )
      ogse.save_var( "dsh_medkit." .. k,           v.value )
    else
      ogse.delete_var( "dsh_medkit." .. k )
      ogse.delete_var( "dsh_medkit." .. k .. ".ttl" )
    end
  end
end


function on_actor_before_use( obj )
  clear_item( obj )
  local sect   = obj:section()
  local hud_fx = get_bool( sect, "dsh_medkit.dsh_hud_fx", false )
  if
    has_alife_info( "biznes_remove_special_item" )
    or not get_bool( sect, "dsh_medkit.apply", true )
    or not ( hud_fx and db.actor:has_info( "ui_inventory" ) )
  then
    return apply_item( sect, obj:condition() )
  end
end


function clear_item( obj )
  local eatable = obj:get_eatable_item()
  ASSERT( eatable, "[%s]: %s is not an eatable", script_name(), obj:name() )
  local sect    = obj:section()
  for k, v in pairs( cfg ) do
    local val = get_float( sect, k )
    if
      val
      and (
        ( val > 0 and not v.negative )
        or ( val < 0  and v.negative )
      )
    then
      if v.item_offset then
        eatable[ v.item_offset ] = 0
      end
    end
  end
end


local silence = false
function set_silence( v )
  silence = v
end


function apply_item( sect, cond )
  if cond == 0 then return end
  local applied = false
  for k, v in pairs( cfg ) do
    local val = get_float( sect, k )
    if
      val
      and (
        ( val > 0 and not v.negative )
        or ( val < 0  and v.negative )
      )
    then
      if not cond then cond = 1 end
      if process( sect, val * cond, v.restore_speed, v.negative ) then
        applied = true
      end
    end
  end
  if applied then
    local pp = get_string( sect, "dsh_medkit.pp" )
    if pp then
      level.add_pp_effector( pp .. ".ppe", 1021, true )
      ogse.save_var( "dsh_medkit.pp", pp, "string" )
    end
    local snd = get_string( sect, "dsh_medkit.snd" )
    if snd and not silence then
      if snd_in_use then
        snd_in_use:stop()
      end
      snd_in_use = xr_sound.get_safe_sound_object( snd_in_use_name )
      snd_in_use:play( db.actor, 0, sound_object.s2d )
      ogse.save_var( "dsh_medkit.snd", true, "bool" )
    end
  end
  return applied
end


function process( sect, v, rs_name, use_negative )
  local t  = restore_speeds[ rs_name ]
  local hl = get_float( sect, "dsh_medkit.how_long", how_long )
  local restore_speed = v / hl
  if t.ttl > 0 then
    if
      ( restore_speed < t.value and not use_negative )
      or ( restore_speed > t.value  and use_negative )
    then
      return false
    end
  end
  t.ttl   = hl
  t.value = restore_speed
  return true
end


function on_timer_end( rs_name )
  local t = restore_speeds[ rs_name ]
  t.ttl   = 0
  t.value = 0
  local stop_pp, stop_snd = true, true
  for k, v in pairs( restore_speeds ) do
    if v.ttl > 0 then
      stop_pp, stop_snd = false, false
      break
    end
  end
  if stop_pp then
    level.remove_pp_effector( 1021 )
    ogse.delete_var( "dsh_medkit.pp" )
  end
  if stop_snd then
    if snd_in_use then
      snd_in_use:stop()
      snd_in_use = nil
    end
    ogse.delete_var( "dsh_medkit.snd" )
  end
end


function restoring( rs_name )
  return restore_speeds[ rs_name ].ttl > 0
end


local dik_use_bandage
function rebind_use_bandage()
  dik_use_bandage = {}
  local data   = dsh_cfg.get_data()
  if not data.use_bandage then return end
  local knames = parse_names( data.use_bandage )
  for _, kn in ipairs( parse_names( data.use_bandage ) ) do
    local dik = keyname_to_dik( kn )
    ASSERT( dik, "keyname to dik not found: %s", kn )
    dik_use_bandage[ dik ] = true
  end
  cmd2( "unbind", "use_bandage" )
  cmd2( "unbind_sec", "use_bandage" )
end


local dik_use_medkit
function rebind_use_medkit()
  dik_use_medkit = {}
  local data   = dsh_cfg.get_data()
  if not data.use_medkit then return end
  local knames = parse_names( data.use_medkit )
  for _, kn in ipairs( parse_names( data.use_medkit ) ) do
    local dik = keyname_to_dik( kn )
    ASSERT( dik, "keyname to dik not found: %s", kn )
    dik_use_medkit[ dik ] = true
  end
  cmd2( "unbind", "use_medkit" )
  cmd2( "unbind_sec", "use_medkit" )
end


function on_mm_return_game()
  rebind_use_bandage()
  rebind_use_medkit()
end


local medkey_holded = false

function on_key_down( key, bind )
  if level.main_input_receiver() then return end
  if dik_use_medkit[ key ] then
    medkey_holded = false
  elseif dik_use_bandage[ key ] then
    local found, t = amk_utils.inventory_search_check({ [ "bandage" ] = 1 })
    if found then
      local obj = t[ 1 ]
      on_actor_before_use( obj )
      db.actor:eat( obj )
    end
  end
end


function on_key_hold( key, bind, press_time )
  if not dik_use_medkit[ key ] then return end
  if medkey_holded == press_time or level.main_input_receiver() then return end
  medkey_holded = press_time
  if not db.eat then
    level.disable_input()
    dsh_inventory.btn_eat()
  end
end


function on_key_up( key, bind )
  if not dik_use_medkit[ key ] then return end
  if medkey_holded then
    medkey_holded = false
    return
  end
  if level.main_input_receiver() or db.eat then return end

  for _, sect in ipairs( use_medkit_order ) do
    local found, t = amk_utils.inventory_search_check({ [ sect ] = 1 })
    if found then
      local obj = t[ 1 ]
      on_actor_before_use( obj )
      db.actor:eat( obj )
      break
    end
  end
end
