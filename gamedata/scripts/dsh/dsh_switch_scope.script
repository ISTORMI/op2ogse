-- -*- mode: lua; coding: windows-1251-dos -*-

local snd_attach = sound_object( "interface\\inv_attach_addon" )
local snd_detach = sound_object( "interface\\inv_detach_addon" )


function attach( sm )
  sm:subscribe({ signal = "on_key_down",    fun = this.on_key_down    })
  sm:subscribe({ signal = "on_mm_return_game", fun = this.on_mm_return_game })
  sm:subscribe({ signal = "on_spawn",       fun = this.on_spawn       })
  sm:subscribe({
    signal = "on_actor_weapon_switch_gl",
    fun    = this.on_actor_weapon_switch_gl,
  })
end


function on_spawn()
  rebind_keys()
end


local dik_scope
function rebind_keys()
  dik_scope = {}
  local data = dsh_cfg.get_data()
  if not data.chat_team then return end
  for _, kn in ipairs( parse_names( data.chat_team ) ) do
    local dik = keyname_to_dik( kn )
    ASSERT( dik, "keyname to dik not found: %s", kn )
    dik_scope[ dik ] = true
  end
  cmd2( "unbind", "chat_team" )
  cmd2( "unbind_sec", "chat_team" )
end


function on_mm_return_game()
  rebind_keys()
end


function on_key_down( key, bind )
  if
    ( not dik_scope[ key ] ) or level.main_input_receiver() or db.eat
  then
    return
  end
  if not (
    db.actor:active_slot() == 1 or db.actor:active_slot() == 2
  ) then return end
  if snd_attach:playing() or snd_detach:playing() then return end
  local wpn = db.actor:active_item()
  if not wpn then return end
  if ogse_wpn_utils.get_scope_status( wpn ) == 1 then
    return switch_int_scope( wpn )
  end
  if not ogse_wpn_utils.get_scope_status( wpn ) == 2 then return end

  local sect         = wpn:section()
  local scope_status = ogse_wpn_utils.get_scope_flag( wpn )
  local scope_sect   = get_string_wq( sect, "scope_name" )
  if not scope_sect then return end
  local scope_width  = get_u32( scope_sect, "inv_grid_width" )
  local scope_item, snd
  if scope_status then
    if db.actor:belt_count() + scope_width > sys_ini:r_u32( "inventory", "max_belt" ) then
      return
    end
    snd = snd_detach
  else
    local scopes = inventory.on_belt_obj( scope_sect )
    if not scopes then return end
    scope_item = scopes[ 1 ]:get_inventory_item()
    snd = snd_attach
  end

  db.actor:hide_weapon()
  snd:play( db.actor, 0, sound_object.s2d )
  local wm = wpn:get_weapon_m()
  dsh.rt_timeout(
    snd:length() * 1.15, function()
      if scope_status then
        wm:detach_addon( scope_sect, false )
        local sobj = ogse.spawn_item_in_inv( scope_sect )
        level.client_spawn_manager():add(
          sobj.id, -1, function( id, obj )
            dsh.rt_exec_on_update(
              function() db.actor:move_to_belt( obj ) end
            )
          end
        )
      else
        wm:attach_addon( scope_item, true )
      end
      db.actor:restore_weapon()
    end
  )
end


function switch_int_scope( wpn )
  local binder = wpn:binded_object()
  if not binder then return end
  local sect = wpn:section()
  local hud  = get_string( sect, "hud" )
  local iron_hud = hud .. ".iron"
  if not sys_ini:section_exist( iron_hud ) then return end
  local flag = "dsh_switch_scope.use_iron_scope"
  db.actor:hide_weapon()
  if binder[ flag ] then
    enable_int_scope( wpn )
  else
    enable_iron_scope( wpn )
  end
  binder[ flag ] = not binder[ flag ]
  dsh.rt_timeout(
    1000, function()
      db.actor:restore_weapon()
    end
  )
end


function enable_int_scope( wpn )
  local sect = wpn:section()
  local hud  = get_string( sect, "hud" )
  ogse_wpn_utils.set_forced_notex_scope( wpn, false )
  ogse_wpn_utils.set_hud_offset(
    wpn, get_numbers( hud, "zoom_offset" )
  )
  local zrx = get_float( hud, "zoom_rotate_x" )
  local zry = get_float( hud, "zoom_rotate_y" )
  ogse_wpn_utils.set_hud_rotate( wpn, { zrx, zry } )
  ogse_wpn_utils.set_scope_zoom_factor(
    wpn, get_float( sect, "scope_zoom_factor" )
  )
end


function enable_iron_scope( wpn )
  local sect = wpn:section()
  local hud  = get_string( sect, "hud" )
  local iron_hud = hud .. ".iron"
  ogse_wpn_utils.set_forced_notex_scope( wpn, true )
  ogse_wpn_utils.set_hud_offset(
    wpn, get_numbers( iron_hud, "zoom_offset" )
  )
  local zrx = get_float( iron_hud, "zoom_rotate_x" )
  local zry = get_float( iron_hud, "zoom_rotate_y" )
  ogse_wpn_utils.set_hud_rotate( wpn, { zrx, zry } )
  ogse_wpn_utils.set_scope_zoom_factor(
    wpn, get_float( iron_hud, "scope_zoom_factor" )
  )
end


function on_actor_weapon_switch_gl( wpn, gl_mode )
  if not gl_mode then return end
  local binder = wpn:binded_object()
  if not binder then return end
  local flag = "dsh_switch_scope.use_iron_scope"
  if binder[ flag ] then
    enable_iron_scope( wpn )
  end
end
