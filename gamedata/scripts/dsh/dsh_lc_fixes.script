-- -*- mode: lua; coding: windows-1251-dos -*-

local lc_fixes = {

  [ "atp_for_test22" ] = {     -- куда
    [ "dead_city" ] = {
      [ "lc" ] = {
        [ story_ids.dead_city_atpeshka ] = {
          [ "exec" ] = "dsh.remove_dead_city_atpeshka",
        }
      }
    },
    [ "l12_stancia_2" ] = {    -- откуда
      [ "set_actor_direction" ] =  3, -- направление взгляда
    },
  },

  [ "l01_escape" ] = {
    [ "zaton" ] = {
      [ "lc" ] = {
        [ story_ids.zaton_to_escape ] = {
          [ "set_actor_direction" ] =  3,
        }
      }
    },
  },

  [ "l02_garbage" ] = {
    [ "aver" ] = {
      [ "set_actor_direction" ] = -1.5,
    },
    [ "atp_for_test22" ] = {
      [ "set_actor_direction" ] =  1.5,
    },
    [ "l03_agroprom" ] = {
      [ "set_actor_direction" ] =  1,
    },
    [ "l04_darkvalley" ] = {
      [ "lc" ] = {
        [ story_ids.val_lvl_changer2 ] = {
          [ "check_distance"   ] = 100,
          [ "check_y_distance" ] = 100,
        }
      },
    },
  },

  [ "l03_agroprom" ] = {
    [ "marsh" ] = {
      [ "lc" ] = {
        [ story_ids.mar_level_changer_to_agroprom_1 ] = {
          [ "give_info" ] = "otkput_march_perexod",
        }
      }
    },
  },

  [ "l04_darkvalley" ] = {
    [ "l01_escape" ] = {
      [ "set_actor_direction" ] =  0,
    },
    [ "l07_military" ] = {
      [ "set_actor_direction" ] =  2.5,
    },
  },

  [ "l05_bar" ] = {
    [ "l07_military" ] = {
      [ "lc" ] = {
        [ story_ids.Mil_Exit_to_Bar ] = {
          [ "check_distance"   ] = 100,
          [ "check_y_distance" ] = 100,
        }
      },
    },
  },

  [ "l07_military" ] = {
    [ "l10_radar" ] = {
      [ "set_actor_direction" ] = -1.5,
    },
    [ "warlab" ] = {
      [ "set_actor_direction" ] = -1.7,
    },
  },

  [ "l08_yantar" ] = {
    [ "l10_radar" ] = {
      [ "lc" ] = {
        [ story_ids.exit_to_yantar_108 ] = {
          [ "exec" ] = "sak.add_new_radar_106",
        }
      }
    },
  },

  [ "l10_radar" ] = {
    [ "l04_darkvalley" ] = {
      [ "lc" ] = {
        [ story_ids.exit_to_radar_109 ] = {
          [ "give_info" ] = "info_way107a",
        }
      }
    },
    [ "l07_military" ] = {
      [ "lc" ] = {
        [ story_ids.Mil_Exit_to_Radar ] = {
          [ "give_info" ] = "info_way112a",
        }
      }
    },
    [ "l11_pripyat" ] = {
      [ "set_actor_position"  ] =  { 381.313, -48.802, 69.007 },
    },
    [ "red_forest" ] = {
      [ "set_actor_direction" ] =  1.5,
    },
  },

  [ "l11_pripyat" ] = {
    [ "atp_for_test22" ] = {
      [ "lc" ] = {
        [ story_ids.level_changer_na_pripyat ] = {
          [ "exec" ] = "arhara_dialog.med_dok_del_lc",
          [ "set_actor_direction" ] =  3,
        }
      }
    },
    [ "l12_stancia" ] = {
      [ "lc" ] = {
        [ story_ids.exit_to_pripyat_from_st1 ] = {
          [ "any_smart"        ] = true,
          [ "check_distance"   ] = 100,
          [ "check_y_distance" ] = 100,
        }
      },
    },
    [ "l12_stancia_2" ] = {
      [ "set_actor_direction" ] = -1.5,
    },
  },

  [ "l12_stancia_2" ] = {
    [ "l12u_sarcofag" ] = {
      [ "set_actor_direction" ] = -1,
    },
  },

  [ "l12u_sarcofag" ] = {
    [ "l10u_bunker" ] = {
      [ "set_actor_direction" ] = -3,
    },
    [ "l12_stancia" ] = {
      [ "set_actor_direction" ] = -3,
    },
    [ "l12_stancia_2" ] = {
      [ "set_actor_direction" ] =  1.5,
    },
  },

  [ "hospital" ] = {
    [ "limansk" ] = {
      [ "set_actor_direction" ] =  3,
    },
    [ "lost_village" ] = {
      [ "set_actor_direction" ] =  3,
    },
  },

  [ "labx8" ] = {
    [ "pripyat" ] = {
      [ "give_info" ] = "lab_pri1_info",
    },
  },

  [ "limansk" ] = {
    [ "hospital" ] = {
      [ "set_actor_direction" ] =  3,
    },
    [ "lost_village" ] = {
      [ "set_actor_direction" ] =  3,
    },
  },

  [ "marsh" ] = {
    [ "l01_escape" ] = {
      [ "set_actor_direction" ] = -1,
    },
  },

  [ "pripyat" ] = {
    [ "jupiter_underground" ] = {
      [ "give_info" ] = "pri1_under_info",
    },
  },

  [ "red_forest" ] = {
    [ "atp_for_test22" ] = {
      [ "lc" ] = {
        [ story_ids.atp_to_red_forest ] = {
          [ "exec" ] = "dsh.remove_atp_to_red_forest",
        }
      }
    },
  },

  [ "warlab" ] = {
    [ "generators" ] = {
      [ "set_actor_direction" ] =  3.0,
    },
  },

  [ "zaton" ] = {
    [ "dead_city" ] = {
      [ "lc" ] = {
        [ story_ids.dcity_to_zaton ] = {
          [ "exec" ] = "dsh.remove_dcity_to_zaton",
        }
      }
    },
    [ "jupiter" ] = {
      [ "give_info" ] = "zat_jup_info",
    },
  },
}


function attach( sm )
  sm:subscribe({ signal = "level_changer_action", fun = this.on_level_changer_action })
  sm:subscribe({ signal = "on_first_update", fun = this.on_first_update })
  sm:subscribe({ signal = "on_before_spawn", fun = this.on_before_spawn })
  sm:subscribe({ signal = "on_spawn",        fun = this.on_spawn })
end


local level_has_changed, lc_props
local need_actor_dir, need_actor_pos

function on_before_spawn()
  need_actor_dir = nil
  need_actor_pos = nil
  local lname      = level.name()
  local prev_lname = ogse.load_var_safe( "prev_level_name" )
  if prev_lname and prev_lname ~= lname then
    local seensak_lname = "seensak_" .. lname
    if db.actor:dont_has_info( seensak_lname ) then
      local g_cnt = amk_anoms.get_new_arts_count()
      log2( "[%s]: %s.new_arts_count = %u", script_name(), seensak_lname, g_cnt )
      ogse.save_var( seensak_lname .. ".new_arts_count", g_cnt )
    end
    db.actor:give_info_portion( "seensak_" .. prev_lname )
    level_has_changed = prev_lname
    local last_lc_id  = ogse.load_var_safe( "dsh_lc_fixes.last_lc_id" )
    local lc_sobj
    if last_lc_id then
      lc_sobj = alife():object( last_lc_id )
    end
    if not has_alife_info( "teleport_started" ) then
      if lc_fixes[ lname ] then
        local t = lc_fixes[ lname ][ prev_lname ]
        if t and t.lc and lc_sobj then
          local t2 = t.lc[ lc_sobj.m_story_id ]
          if t2 then t = t2 end
        end
        lc_props = t
        if t then
          need_actor_dir = t.set_actor_direction
          need_actor_pos = t.set_actor_position
          if t.give_info then
            db.actor:give_info_portion( t.give_info )
          end
          if t.exec then
            local f, err = loadstring( "return " .. t.exec .. "( ... )" )
            ASSERT( f, err )
            f()
          end
        end
      end
    end
    backup_autosave( prev_lname )
    local sm = ogse_signals.get_mgr()
    sm:call( "on_before_spawn_another_level", lname, prev_lname, lc_sobj )
  else
    level_has_changed = false
  end
  ogse.delete_var( "dsh_lc_fixes.last_lc_id" )
  ogse.save_var( "prev_level_name", lname )
end


function on_first_update()
  if need_actor_dir then
    db.actor:set_actor_direction( need_actor_dir )
  end
  if need_actor_pos then
    db.actor:set_actor_position( vector():set( unpack( need_actor_pos ) ) )
  end
  local prev_lname = has_level_changed()
  if prev_lname then
    local sm = ogse_signals.get_mgr()
    sm:call( "on_first_update_another_level", level.name(), prev_lname )
  end
end


function has_level_changed()
  if level_has_changed == nil then
    local lname      = alife():actor().level_name
    local prev_lname = ogse_unist.get_value_safe( "prev_level_name" )
    if prev_lname and prev_lname ~= lname then
      level_has_changed = prev_lname
      if not has_alife_info( "teleport_started" ) then
        if lc_fixes[ lname ] then
          local t = lc_fixes[ lname ][ prev_lname ]
          if t and t.lc then
            local last_lc_id = ogse_unist.get_value_safe(
              "dsh_lc_fixes.last_lc_id"
            )
            local lc_sobj
            if last_lc_id then
              lc_sobj = alife():object( last_lc_id )
            end
            if lc_sobj then
              local t2 = t.lc[ lc_sobj.m_story_id ]
              if t2 then t = t2 end
            end
          end
          lc_props = t
        end
      end
    else
      level_has_changed = false
    end
  end
  return level_has_changed, lc_props
end


function on_spawn()
  local prev_lname = has_level_changed()
  if prev_lname then
    local sm = ogse_signals.get_mgr()
    sm:call( "on_spawn_another_level", level.name(), prev_lname )
    sm:call(
      "on_spawn_another_level_" .. level.name(), level.name(), prev_lname
    )
  end
end


function backup_autosave( prev_lname )
  local last_save = alife().loaded_save_name
  if not string.find( last_save, "_autosave.sav" ) then return end
  local lc_save = string.format(
    game.translate_string( "backup_autosave" ),
    amk.game_days(),
    game.translate_string( prev_lname ),
    game.translate_string( level.name() )
  )
  local f  = getFS()
  last_save = f:update_path( "$game_saves$", last_save )
  lc_save   = f:update_path( "$game_saves$", dsh.safe_file_name( lc_save ) )
  if f:exist( lc_save ) then
    f:file_delete( lc_save )
  end
  f:file_copy( last_save, lc_save )
end


function on_level_changer_action( obj, wnd )
  ogse.save_var( "dsh_lc_fixes.last_lc_id", obj:id() )
  dsh.exec_periodic(
    1000,
    function( timer )
      if not wnd:IsShown() then
        ogse.delete_var( "dsh_lc_fixes.last_lc_id" )
        timer:stop()
      end
    end
  )
end


function was_new_arts_count( lname )
  if not lname then lname = level.name() end
  local seensak_lname = "seensak_" .. lname
  return ogse.load_var( seensak_lname .. ".new_arts_count", 0 )
end


function get_new_arts_count()
  local l_cnt = was_new_arts_count()
  local g_cnt = amk_anoms.get_new_arts_count()
  ASSERT(
    l_cnt <= g_cnt,
    "[%s]: l_cnt[%s] > g_cnt[%s]", script_name(), l_cnt, g_cnt
  )
  return g_cnt - l_cnt
end
