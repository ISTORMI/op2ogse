-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm ) -- для менеджера сигналов
  sm:subscribe({
    signal = "on_before_actor_conditions_update",
    fun    = this.on_actor_conditions_update
  })
  sm:subscribe({ signal = "on_sleep_finished", fun = this.on_sleep_finished })
  sm:subscribe({ signal = "on_spawn",          fun = this.on_spawn          })
  sm:subscribe({ signal = "on_use",            fun = this.on_use            })
end


local end_timer
local energy_drink_boost   = 0
local energy_drink_in_use  = false
local energy_drink_speedup = false
local snd_in_use_name = "affects\\heartbeat"
local timers = {
  [ "can_boost"        ] = "dsh_energy_drink.can_boost",
  [ "use_energy_drink" ] = "dsh_energy_drink.use_energy_drink",
}


function on_spawn()
  if ogse_st_mgr.timer_exists( timers.use_energy_drink ) then
    energy_drink_in_use = true
  end
  energy_drink_boost = ogse.load_var( "dsh_energy_drink.energy_drink_boost", 0 )
end


local jump_speed_add  = get_float( "actor", "jump_speed" ) / 2
local satiety_v       = get_float( "actor_condition", "satiety_v" )
local satiety_power_v = get_float( "actor_condition", "satiety_power_v"  )
-- +200
local power_restore_speed = satiety_power_v * 200


function on_actor_conditions_update( ext )
  if energy_drink_in_use then
    local satiety_k
    if energy_drink_speedup or ogse_actor_conditions_mgr.has_overweight then
      ext.power_restore_speed = ext.power_restore_speed
        + power_restore_speed * energy_drink_boost
      satiety_k = 1
    else
      satiety_k = 4
    end
    ext.satiety_restore_speed = ext.satiety_restore_speed
      + satiety_v * satiety_k * energy_drink_boost
    if energy_drink_speedup then
      ext.jump_speed_add  = ext.jump_speed_add  + jump_speed_add
      ext.sprint_koef_add = ext.sprint_koef_add + 0.9
      ext.walk_accel_add  = ext.walk_accel_add  + 1
    end
  end
end


function on_use( obj )
  local sect = obj:section()
  if sect == "energy_drink" then
    use_energy_drink()
  end
end


local snd_in_use
function use_energy_drink()
  local n = get_energy_drink_n()
  if dsh_sleep.want_sleep_k() > 0 and n < 3 then
    dsh_sleep.change_gg_need_sleep( -40 + n * 10 )
  end
  if
    n < 3
    and (
      ogse_st_mgr.timer_exists( timers.can_boost )
      or not energy_drink_in_use
    )
  then
    if not energy_drink_in_use then
      ogse_st_mgr.delayed_fun_start( timers.use_energy_drink )
        :set_gdelay( 3600 * 1.5 - 1800 * n )
        :init( "dsh_energy_drink.on_energy_drink_end" )
        :start()
      ogse_st_mgr.delayed_fun_start( timers.can_boost )
        :set_delay( 60 )
        :init( "dsh_energy_drink.on_energy_drink_can_boost_end" )
        :start( true )
      if end_timer then
        end_timer:stop()
        end_timer = nil
      end
      if snd_in_use then
        snd_in_use:stop()
      end
      set_actor_power_max( 1 )
      energy_drink_speedup = true
      dsh.timeout(
        30 * 1000,
        function() energy_drink_speedup = false end
      )
    end
    energy_drink_in_use = true
    set_energy_drink_n( n + 1 )
    energy_drink_boost = energy_drink_boost + 1
    ogse.save_var(
      "dsh_energy_drink.energy_drink_boost", energy_drink_boost, "u8"
    )
  end
end

function on_energy_drink_can_boost_end() end


function on_energy_drink_end()
  if not snd_in_use then
    snd_in_use = xr_sound.get_safe_sound_object( snd_in_use_name )
  end
  snd_in_use:play( db.actor, 0, sound_object.s2d )
  end_timer = dsh.timeout( snd_in_use:length(), post_energy_drink_end1 )
  ogse.delete_var( "dsh_energy_drink.energy_drink_boost" )
  energy_drink_boost  = 0
  energy_drink_in_use = false
end


function post_energy_drink_end1()
  set_actor_power_max( 0.1 )
  local n = get_energy_drink_n()
  if n == 0 then n = 1 end
  end_timer = dsh.timeout( 3000 * n, post_energy_drink_end2 )
end


function post_energy_drink_end2()
  end_timer = nil
  set_actor_power_max( 1 )
end


local energy_n_txt = { "energy_n_txt_1", "energy_n_txt_2", "energy_n_txt_3" }

function on_sleep_finished( sleep_seconds )
  local expire_n = math.floor( sleep_seconds / ( 6 * 3600 ) )
  local energy_n = get_energy_drink_n()
  if energy_n > expire_n then
    energy_n = energy_n - expire_n
  else
    energy_n = 0
  end
  set_energy_drink_n( energy_n )
  ogse.delete_var( "dsh_energy_drink.energy_drink_boost" )
  energy_drink_boost   = 0
  energy_drink_in_use  = false
  energy_drink_speedup = false
  if end_timer then
    end_timer:stop()
    end_timer = nil
  end
  for n in ipairs({ "can_boost", "use_energy_drink" }) do
    if ogse_st_mgr.timer_exists( timers[ n ] ) then
      ogse_st_mgr.get_timer( timers[ n ] ):stop()
    end
  end
  if energy_n > 0 then
    post_energy_drink_end1()
    local need_sleep = 0
    for i = 1, energy_n do
      need_sleep = need_sleep + 40 + ( energy_n - 1 ) * 10
    end
    dsh_sleep.change_gg_need_sleep( need_sleep )
    dsh.rt_timeout(
      4000,
      function()
        news_manager.send_tip(
          db.actor,
          string.format(
            game.translate_string( "on_sleep_finished_need_more" ),
            game.translate_string( energy_n_txt[ energy_n ] )
          ),
          nil, nil, 10000
        )
      end
    )
  end
end


function get_energy_drink_n()
  return ogse.load_var( "dsh_energy_drink.energy_drink_n", 0 )
end
function set_energy_drink_n( v )
  ogse.save_var( "dsh_energy_drink.energy_drink_n", v, "u8" )
end


function is_energy_drink_in_use()
  return energy_drink_in_use
end
