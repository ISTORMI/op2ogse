-- -*- mode: lua; coding: windows-1251-dos -*-

-- File:        _sData.SCRIPT
-- Copyright:   2009 Singapur22
-- Authors:     Singapur22, Gun12
-- Last edit:	KamikaZze (11.06.14)
-- Global Description: Отладочная информация

GlobalEnable = false --Включить скрипт? Подробные настройки смотрите ниже

-- ПОДРОБНОЕ ОПИСАНИЕ:

-- Показывает позицию актора
-- Показывает полученные инфопоршни
-- Показывает информацию о НПС - Имя(указаное в ресурсах игры), смарт (в котором находится НПС), количество НПС в смарте, активную секцию логики, здоровье, противника
-- Сохраняет в логе позицию НПС, на которых наведен прицел
-- Показывает зоны, в которых находится актор
-- Показывает информацию о ГГ - здоровье, сила, радиация, сытость, жажда, сонливость, наличные, пси-здоровье, мораль, ранг, группировка, репутация. Все параметры настраиваются
-- Показывает счетчиков новых амчивок
-- Показывает состояние предметов в слотах

local subscribed
function subscribe()
  GlobalEnable = true
  ogse_benchmark.subscribe()
  subscribed = {
    { signal = "on_info", fun = this.infos },
    { signal = "on_actor_update", fun = this.vis_int },
  }
  for _, s in ipairs( subscribed ) do
    ogse_signals.get_mgr():subscribe( s )
  end
end

function unsubscribe()
  for _, s in ipairs( subscribed ) do
    ogse_signals.get_mgr():unsubscribe( s )
  end
  subscribed = nil
  switch_off()
  ogse_benchmark.unsubscribe()
  GlobalEnable = false
end

----------------------------------------------------------------------------
-- ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ! НЕ УДАЛЯТЬ
local hud = get_hud()
----------------------------------------------------------------------------

----------------------------------------------------------------------------
-- ОБЩИЕ НАСТРОЙКИ
-- False - выключить, true - включить
----------------------------------------------------------------------------
local bPosition		= true  -- включение схемы показа координат
local bInfos		= true	-- включение схемы показа состояний инфопоршнэй
local bInfoAbout	= true	-- включение схемы показа информации о НПС
local bZones		= true	-- включение схемы показа попадания ГГ в зону
local bActorData	= false  -- включение всей схемы показа данных ГГ.
local bAchmData		= false	-- включение схемы показа счетчиков новых амчивок
local bSlotsData	= false	-- включение всей схемы показа состояния предметов в активных слотах

-- ГУЛАГИ
----------------------------------------------------------------------------
-- Проверка численности гулагов, с выводом результата на монитор.
-- Возможна проверка не ограниченного колличества гулагов, одновременно.
-- Результат выводится не зависимо от того, находятся нпс в online или offline.
-- Но только, если локация, на которой гулаг находится, активна.
-- Отключать схему не обязательно. При пустой таблице, схема не показывается.
-- Имена гулагов, писать в кавычках, через запятую.
-- Пример: local GulagsTbl = {"name1","name2","name3"}
local GulagsTbl = {}
local bGulags = false
----------------------------------------------------------------------------
-- НАСТРОЙКИ АКТОР
----------------------------------------------------------------------------
local aHealth		= true	-- включение показа здоровья
local aPower		= true	-- включение показа силы
local aRadiation 	= true	-- включение показа радиационного облучения
local aSatiety		= true	-- включение показа сытости
local aDrinky		= false	-- включение показа жажды
local aSleepy		= true	-- включение показа сонливости
local aMoney		= true	-- включение показа суммы наличных (денег)
local aPsyHealth	= true	-- включение показа пси-здоровья
local aMorale		= true	-- включение показа морали
local aRang			= false	-- включение показа ранга
local aCommunity	= true	-- включение показа группировки
local aReputation	= true	-- включение показа репутации

----------------------------------------------------------------------------
-- ПРЕДМТЫ В СЛОТАХ
----------------------------------------------------------------------------
local bSlot1		= true  -- включение показа слота 1 (пистолет)
local bSlot2		= true  -- включение показа слота 2 (автомат)
local bSlot7 		= true  -- включение показа слота 7 (броня)
local bSlot12		= true	-- включение показа слота 12 (шлем)

----------------------------------------------------------------------------
-- ВЫВОД СТАТИСТИКИ НА HUD
----------------------------------------------------------------------------

----------------------------------------------------------------------------
local SGameMtlFlagKeys = {
	"flActorObstacle",
	"flBloodmark",
	"flBounceable",
	"flClimable",
	"flDynamic",
	"flInjurious",
	"flLiquid",
	"flPassable",
	"flSlowDown",
	"flSuppressShadows",
	"flSuppressWallmarks" 
}

local function get_mtl_flags(Flags)
	local str
	for _, k in ipairs(SGameMtlFlagKeys) do
		local fv = SGameMtlFlags[k]
		if Flags:test(fv) then
			if not str then
				str = k
			else
				str = str .. "," .. k
			end
		end
	end
	return str or "<none>"
end
----------------------------------------------------------------------------

function switch_off()
	
	local statics = {
		["gul_debug"] = true,
		["prs_debug"] = true,
		["logic_debug"] = true,
		["cs_debug"] = true,
		["act_debug"] = true,
		["ach_debug"] = true,
		["slots_debug"] = true
	}
	
	for k, v in pairs(statics) do
		local Static = hud:GetCustomStatic(k)
		if Static then
			hud:RemoveCustomStatic(k)
		end
	end
	
end

local zones_time = 0
function zones()

    local ZonesText
	
	local ZoneCS = hud:GetCustomStatic("gul_debug")
	if ZoneCS == nil then
		hud:AddCustomStatic("gul_debug",true)
		ZoneCS = hud:GetCustomStatic("gul_debug")
	end
	
	ZoneCS:wnd():SetText("Актор в зоне:\\n")
	
	for name,zone in pairs (db.zone_by_name) do
		if utils.npc_in_zone(db.actor,zone) then
			if string.find(zone:section(),"space_restrictor") then
			    ZonesText = string.format(ZoneCS:wnd():GetText())..
				string.format("%s (%s) (sr)\\n",tostring(name),tostring(db.storage[zone:id()].active_section))
			elseif string.find(zone:section(),"smart_terrain") then
			    ZonesText = string.format(ZoneCS:wnd():GetText())..
				string.format("%s (st)\\n",tostring(name))
			else
			    ZonesText = string.format(ZoneCS:wnd():GetText())..
			    string.format("%s (anom)\\n",tostring(name))
			end
		    if ZoneCS ~= nil then ZoneCS:wnd():SetText(ZonesText) end  		
	    end
	end
end


local k=0
function infos(npc, info_id)
	if bInfos then
		local InfoCS = hud:GetCustomStatic("prs_debug")
		if InfoCS == nil then
			hud:AddCustomStatic("prs_debug",true)
			InfoCS = hud:GetCustomStatic("prs_debug")
		end
		local OrigInfoText=InfoCS:wnd():GetText()
		k=k+1
		if k>12 then
			OrigInfoText=string.sub(OrigInfoText,(string.find(OrigInfoText, "\\n") or 0)+2,string.len(OrigInfoText))
			k=k-1
		end
		local InfoText = string.format("%s%s\\n",tostring(OrigInfoText),tostring(info_id))
		if InfoCS ~= nil then InfoCS:wnd():SetText(InfoText) end
	end
end


local mental_anims = {
  [ 0 ] = "danger",
  [ 1 ] = "free",
  [ 2 ] = "panic",
}

local danger_types = {
  [ danger_object.attack_sound    ] = "attack sound",
  [ danger_object.attacked        ] = "attacked",
  [ danger_object.bullet_ricochet ] = "bullet ricochet",
  [ danger_object.enemy_sound     ] = "enemy sound",
  [ danger_object.entity_attacked ] = "entity attacked",
  [ danger_object.entity_corpse   ] = "entity corpse",
  [ danger_object.entity_death    ] = "entity death",
  [ danger_object.grenade         ] = "grenade",
}

function info_about_npc()
  clear_info_about_npc()
  local PosLogic = hud:GetCustomStatic( "logic_debug" )
  if not PosLogic then
    hud:AddCustomStatic( "logic_debug", true )
    PosLogic = hud:GetCustomStatic( "logic_debug" )
  end

  local rq = level.get_current_ray_query()
  -- local rq = level.ray_query(
  --   device().cam_pos, device().cam_dir, 300, rq_target.rqtBoth, db.actor
  -- )
  local target_obj = rq.object

  local LogicText
  if target_obj then
    if
      target_obj:is_stalker() or target_obj:is_monster()
      or target_obj:is_trader()
    then
      local gulag_val, scheme1, scheme2, anim, mental, pos, lv, gv

      local gulag = xr_gulag.get_npc_gulag( target_obj )
      if gulag then
        gulag = gulag.name
        gulag_val = xr_gulag.getGulagPopulation( gulag )
      end

      if db.storage[ target_obj:id() ] then
        scheme1 = tostring( db.storage[ target_obj:id() ].active_section )
        scheme2 = tostring( db.storage[ target_obj:id() ].section_logic  )
        if db.storage[ target_obj:id() ].state_mgr then
          anim = db.storage[ target_obj:id() ].state_mgr.animstate:state()
          mental = state_lib.states[ db.storage[ target_obj:id() ].state_mgr.target_state ].mental
          mental = mental_anims[ mental ]
            or ( tostring( mental ) .. " (unknown state!)" )
        end
      end

      local be = target_obj:best_enemy()
      if be then
        be = be:name()
      end
      local xrs_be = xrs_battle_ai.get_target( target_obj )
      if xrs_be then xrs_be = xrs_be:name() end
      local best_danger = target_obj:best_danger()
      local best_danger_name
      local best_danger_type
      if best_danger and best_danger:object() then
        best_danger_name = best_danger:object():name()
      end
      if best_danger then
        best_danger_type = danger_types[ best_danger:type() ] or "not specified"
      end

      local community = "monster"
      if target_obj:is_stalker() then
        community = target_obj:character_community()
      end

      local storage = db.storage[ target_obj:id() ]
      local scheme = storage.active_scheme
      local state = state_mgr.get_state( target_obj )
      local active_evaluator = ogse_debug.get_active_evals( target_obj )
      local active_danger    = ogse_debug.get_active_dangers( target_obj )
      local active_anim      = ogse_debug.get_active_anims( target_obj )

      LogicText = {
        string.format(
          "npc: sect: [%s] name: [%s]", target_obj:section(), target_obj:name()
        ),
        string.format(
          "npc: id: %s story_id: %s comm: [%s]",
          target_obj:id(), target_obj:story_id(), community
        ),
        string.format(
          "npc: behave scheme: [%s], fov: %s, range: %s",
          tostring( scheme ), target_obj:fov(), target_obj:range()
        ),
        string.format(
          "npc: st_mgr state: [%s] anim: [%s] mental: [%s]",
          tostring( state ), tostring( anim ), tostring( mental )
        ),
        string.format( "npc: last active eval: %s", active_evaluator or "" ),
        string.format( "npc: last active danger: %s", active_danger or "" ),
        string.format( "npc: last active anim_eval: %s", active_anim or "" ),
        "------------------",
        string.format(
          "best_enemy: xrs_battle_ai[%s] engine[%s]",
          tostring( xrs_be ), tostring( be )
        ),
        string.format( "best_danger: %s", tostring( best_danger_name ) ),
        string.format( "best_danger_type: %s", tostring( best_danger_type ) ),
        string.format(
          "is wounded: %s, health: %s, bleeding: %s",
          tostring( xr_wounded.is_wounded( target_obj ) ), target_obj.health,
          target_obj:get_bleeding()
        ),
        "------------------",
        string.format( "profile name: %s", tostring( target_obj:profile_name() ) ),
        string.format( "visual name: %s", tostring( target_obj:get_visual_name() ) ),
        string.format( "gulag: %s", tostring( gulag ) ),
        string.format( "gulag val: %s", tostring( gulag_val ) ),
        string.format( "gulag job: %s", scheme1 ),
        string.format( "global job: %s", scheme2 ),
        string.format(
          "coords: X %1.3f, Y %1.3f, Z %1.3f",
          target_obj:position().x, target_obj:position().y, target_obj:position().z
        ),
        string.format(
          "level_vertex: %s, game_vertex: %s",
          target_obj:level_vertex_id(), target_obj:game_vertex_id()
        ),
      }

    else
      local scheme1, scheme2
      if db.storage[ target_obj:id() ] then
        scheme1 = tostring( db.storage[ target_obj:id() ].active_section )
        scheme2 = tostring( db.storage[ target_obj:id() ].section_logic  )
      end
      LogicText = {
        string.format( "obj: section: %s", target_obj:section() ),
        string.format( "obj: name: %s", target_obj:name() ),
        string.format( "obj: id: %s", target_obj:id() ),
        string.format( "story_id: %s", target_obj:story_id() ),
        string.format( "visual name: %s", target_obj:get_visual_name() ),
        "------------------",
        string.format(
          "coords: X %1.3f, Y %1.3f, Z %1.3f",
          target_obj:position().x, target_obj:position().y, target_obj:position().z
        ),
        string.format(
          "dir: X %1.3f, Y %1.3f, Z %1.3f",
          target_obj:direction().x, target_obj:direction().y, target_obj:direction().z
        ),
        string.format( "Active logic: %s", tostring( scheme2 ) ),
        string.format( "Logic Section: %s", tostring( scheme1 ) ),
        string.format( "level_vertex: %s", target_obj:level_vertex_id() ),
        string.format( "game_vertex: %s", target_obj:game_vertex_id() ),
      }
      if target_obj:is_ammo() then
        table.insert(
          LogicText,
          string.format( "bullets in pack: %s", target_obj:get_current_ammo() )
        )
      end
    end

    local bone = rq.element
    if bone then
      local bone_name = target_obj:get_bone_name( bone )
        table.insert(
          LogicText,
          string.format( "bone index=%s, name=%s", bone, bone_name )
        )
    end

  elseif rq.mtl then
    LogicText = { get_mtl_text( rq.mtl ) }
  else
    LogicText = {}
  end

  local dist = level.get_target_real_dist()
  if dist then
    table.insert( LogicText, string.format( "distance: %s", dist ) )
    local pos = vector():mad( device().cam_pos, device().cam_dir, dist )
    table.insert(
      LogicText,
      string.format( "target pos: %1.3f, %1.3f, %1.3f", pos.x, pos.y, pos.z )
    )
  end

  if PosLogic then
    PosLogic:wnd():SetText( table.concat( LogicText, "\\n" ) )
  end
end


function get_mtl_text( mtl )
  local LogicText = "mtl: m_Name: "..tostring( mtl.m_Name  ).."\\n"..
			"mtl: m_Desc: "..tostring( mtl.m_Desc ).."\\n"..
			"------------------\\n"..
			"Flags: "..get_mtl_flags(mtl.Flags).."\\n"..
			"------------------\\n"..
			"mtl: fFlotationFactor: "..mtl.fFlotationFactor.."\\n"..
			"mtl: fShootFactor: "..mtl.fShootFactor.."\\n"..
			"mtl: fBounceDamageFactor: "..mtl.fBounceDamageFactor.."\\n"..
			"mtl: fInjuriousSpeed: "..mtl.fInjuriousSpeed.."\\n"..
			"mtl: fVisTransparencyFactor: "..mtl.fVisTransparencyFactor.."\\n"..
			"mtl: fSndOcclusionFactor: "..mtl.fSndOcclusionFactor.."\\n"..
			"------------------\\n"..
			"mtl: fPHFriction: "..mtl.fPHFriction.."\\n"..
			"mtl: fPHDamping: "..mtl.fPHDamping.."\\n"..
			"mtl: fPHSpring: "..mtl.fPHSpring.."\\n"..
			"mtl: fPHBounceStartVelocity: "..mtl.fPHBounceStartVelocity.."\\n"..
			"mtl: fPHBouncing: "..mtl.fPHBouncing.."\\n"..
			"------------------"
  return LogicText
end


local show_info_about_time = 0
function clear_info_about_npc()
	 if show_info_about_time < time_global() then
        local PosLogic = hud:GetCustomStatic("logic_debug")
    	if PosLogic == nil then
			hud:AddCustomStatic("logic_debug",true)
		    PosLogic = hud:GetCustomStatic("logic_debug")
	    end
        PosLogic:wnd():SetText("")
		show_info_about_time = time_global() + 2500
    end
end

function vis_int()
	ogse_signals.get_mgr():reschedule( 500 )

	if bInfoAbout then
		info_about_npc()
	end

	-- зоны
	if bZones then
	    this.zones()
	end

	-- Координаты
	if bPosition == true then
		local PosCS = hud:GetCustomStatic("cs_debug")
		if PosCS == nil then
			hud:AddCustomStatic("cs_debug",true)
			PosCS = hud:GetCustomStatic("cs_debug")
		end
		local lvid,gvid = db.actor:level_vertex_id(),db.actor:game_vertex_id()
		local pos, dir, campos = db.actor:position(), device().cam_dir, device().cam_pos
		local eyelid_1_pos = db.actor:bone_position( "eyelid_1" )
		local valid = level.valid_vertex_id( level.vertex_id( pos ) )
 		local fps_check = ogse_benchmark.get_fps()
		local PosText = string.format("pos: %1.3f,%1.3f,%1.3f\\n",pos.x,pos.y,pos.z)..	-- позиция ГГ (x,y,z)
						string.format( "cam_pos:  %1.3f, %1.3f, %1.3f\\n", campos.x, campos.y, campos.z )..	-- позиция камеры (x,y,z)
						string.format( "eyelid_1: %1.3f, %1.3f, %1.3f\\n", eyelid_1_pos.x, eyelid_1_pos.y, eyelid_1_pos.z )..
						string.format("dir: %1.3f,%1.3f,%1.3f\\n",dir.x,dir.y,dir.z)..	-- поворот ГГ вокруг осей (x,y,z) (гонит)
		                string.format("lvid: %d\\n",lvid)..								-- левел вертекс
						string.format("gvid: %d\\n",gvid)..								-- гейм вертекс
						string.format("valid: %s\\n",tostring(valid))..					-- наличие AI-сетки в данной координате
						string.format("fps: %d\\n",fps_check)							-- наличие AI-сетки в данной координате
		if PosCS ~= nil then PosCS:wnd():SetText(PosText) end
	end

	-- гулаги
	if bGulags then
		local GlgCS = hud:GetCustomStatic("gul_debug")
		if GlgCS == nil then
			hud:AddCustomStatic("gul_debug",true)
			GlgCS = hud:GetCustomStatic("gul_debug")
		end
		local GlgText =" " 
		local name_g = ""
		for k,name_g in ipairs(GulagsTbl) do
		    local val = xr_gulag.getGulagPopulationComed(name_g)
			--local cas = smart_terrain.getCasualities(name_g)
		    if val ~= nil  then
		        GlgText = GlgText.. string.format("%s\\n", tostring(name_g.." = ".. val))
		    end
		end
		if GlgCS ~= nil then GlgCS:wnd():SetText(GlgText) end
	end

	-- параметры ГГ
	if bActorData == true then
		local ActCS = hud:GetCustomStatic("act_debug")
		if ActCS == nil then
			hud:AddCustomStatic("act_debug", true)
			ActCS = hud:GetCustomStatic("act_debug")
		end
		local str
		local ActText = ""
		local aCommun = db.actor:character_community()
		if string.find(aCommun,"actor") then
			aCommun = GetString("stalker")
		elseif string.find(aCommun,"dolg") then
			aCommun = GetString("dolg")
		elseif string.find(aCommun,"freedom") then
			aCommun = GetString("freedom")
		elseif string.find(aCommun,"bandit") then
			aCommun = GetString("bandit")
		elseif string.find(aCommun,"killer") then
			aCommun = GetString("killer")
		elseif string.find(aCommun,"military") then
			aCommun = GetString("army")
		elseif string.find(aCommun,"ecolog") then
			aCommun = GetString("ecolog")
		elseif string.find(aCommun,"stranger") then
			aCommun = GetString("stranger")
		elseif string.find(aCommun,"monolith") then
			aCommun = GetString("monolit")
		elseif string.find(aCommun,"zombied") then
			aCommun = GetString("zombied")
		elseif string.find(aCommun,"trader") then
			aCommun = GetString("trader")
		end
		if aHealth == true then
			str = string.format(" %1.3f",db.actor.health)
			ActText = ActText.. GetString("sdata_actor_health").. tostring(str).."("..math.ceil(tonumber(str)*100).."%)\\n"
		end
		if aPower == true then
			str=string.format(" %1.3f",db.actor.power)
			ActText = ActText.. GetString("sdata_actor_power").. tostring(str).." ("..math.ceil(tonumber(str)*100).."%)\\n"
		end
		if aRadiation == true then
			str = string.format(" %1.3f",db.actor.radiation)
			ActText = ActText.. GetString("sdata_actor_radiation").. tostring(str).." ("..math.ceil(tonumber(str)*100).."%)\\n"
		end
		if aSatiety == true then
			str = string.format(" %1.3f",db.actor.satiety)
			ActText = ActText.. GetString("sdata_actor_satiety").. tostring(str).." ("..math.ceil(tonumber(str)*100).."%)\\n"
		end
		if aDrinky==true then
			ActText = ActText.. string.format(GetString("sdata_actor_drinky").." %d",ars_mod.get_actor_drinky()).."%\\n"
		end
		if aSleepy==true then
			ActText = ActText.. string.format(GetString("sdata_actor_sleepy").." %d",ars_mod.get_actor_sleepy()).."%\\n"
		end
		if aMoney==true then
			ActText = ActText.. string.format(GetString("sdata_actor_money").." %d\\n",db.actor:money())
		end
		if aPsyHealth==true then
			str = string.format(" %1.3f",db.actor.psy_health)
			ActText = ActText.. GetString("sdata_actor_psy_health").. tostring(str).." ("..math.ceil(tonumber(str)*100).."%)\\n"
		end
		if aMorale == true then
			ActText = ActText.. string.format(GetString("sdata_actor_morale").." %s\\n",tostring(db.actor.morale))
		end
		if aRang == true then
			ActText = ActText.. string.format(GetString("sdata_actor_rang").." %d\\n",db.actor:character_rank())
		end
		if aCommunity == true then
			ActText = ActText.. string.format(GetString("sdata_actor_community").." %s\\n",tostring(aCommun))
		end
		if aReputation == true then
			ActText = ActText.. string.format(GetString("sdata_actor_reputation").." %d\\n",db.actor:character_reputation())
		end
		if ActCS ~= nil then ActCS:wnd():SetText(ActText) end
	end

	-- новые амчики
	if bAchmData == true then
		local AchCS=hud:GetCustomStatic("ach_debug")
		if AchCS == nil then
			hud:AddCustomStatic("ach_debug",true)
			AchCS=hud:GetCustomStatic("ach_debug")
		end
		local AchText = ""
		AchText = AchText.. string.format(GetString("sdata_achievement_headshots").." %d\\n",ars_achievements.ars_statistic.headshot)
		AchText = AchText.. string.format(GetString("sdata_achievement_medkits").." %d\\n",ars_achievements.ars_statistic.medkit)
		AchText = AchText.. string.format(GetString("sdata_achievement_mitems").." %d\\n",ars_achievements.ars_statistic.m_item)
		AchText = AchText.. string.format(GetString("sdata_achievement_mobjects").." %d\\n",ars_achievements.ars_statistic.objects)
		AchText = AchText.. string.format(GetString("sdata_achievement_crows").." %d\\n",ars.read_variable("ArsCrowCount",0))
		if AchCS ~= nil then AchCS:wnd():SetText(AchText) end
	end

	-- активные слоты
	if bSlotsData == true then
		if bSlot1 == true or bSlot2 == true or bSlot7 == true or bSlot12 == true then
			local SlotCS = hud:GetCustomStatic("slots_debug")
			if SlotCS == nil then
				hud:AddCustomStatic("slots_debug", true)
				SlotCS = hud:GetCustomStatic("slots_debug")
			end
			local SlotText = ""
			for i = 1,12 do
				local slot
				local name_str = ""
				local cond_str = ""
				if i == 2 or i == 3 or i == 7 or i == 12 then
					slot = db.actor:item_in_slot(i)
					if slot then
						name_str = string.format("%s\\n", GetString(GetItemName(slot:section())))
						cond_str = string.format("State: %1.2f\\n", slot:condition())
					else
						name_str = "empty"
					end
					SlotText = SlotText.. GetString("Slot "..i..": ").. name_str.."\\n"..cond_str.."\\n\\n"
				end
			end
			if SlotCS ~= nil then SlotCS:wnd():SetText(SlotText) end
		end
	end
	-- Eof
end
